{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Churn Case Study\n",
    "\n",
    "## Context\n",
    "\"Predict behavior to retain customers. You can analyze all relevant customer data and develop focused customer retention programs.\" [IBM Sample Data Sets]\n",
    "\n",
    "\n",
    "<img src=\"https://images.pexels.com/photos/3078/home-dialer-siemens-telephone.jpg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\" style=\"width:400px\">\n",
    "\n",
    "**Client**: Telco Company in the USA offering triple play (phone, internet and TV).\n",
    "\n",
    "New competitor entered offering triple play, resulting in increased churn.\n",
    "\n",
    "Want better way to spot potential churning customers and suggested actions what to do."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **Assignment**\n",
    "\n",
    "- Define the business problem\n",
    "- Determine which evaluation metric you find appropriate:\n",
    "   - accuracy\n",
    "   - precision\n",
    "   - recall\n",
    "   - f1 score\n",
    "- Determine which type of slice/segment/type of churn you are interested\n",
    "- Run \"data prep code\"\n",
    "- Use logistic regression to create 2-3 model specifications\n",
    "  - model 1 (vanilla model): uses cleaned data as is, find best cutoff using chosen metric\n",
    "  - model 2: create at least **2 new features** and add them to the model\n",
    "  - model 3 (if time, a 'reach' model): increase the LASSO penalty to decrease the feature set\n",
    "- Pick the \"best\" model and find the \"best\" threshold\n",
    "- Use \"best\" model to identify the drivers of churn in your segment analysis and make recommendations for the company\n",
    "- Each group will have 5 minutes to present their recommendations to the rest of the class. Make sure to share:\n",
    "   - segment you chose\n",
    "   - evaluation metric you chose based on the business problem\n",
    "   - evaluation metric of \"best\" model's threshold & threshold\n",
    "   - what drives churn and what are your recommendations\n",
    "   - **if you had more time** what would you work on?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data\n",
    "\n",
    "<img src=\"https://images.pexels.com/photos/53621/calculator-calculation-insurance-finance-53621.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\" style = \"width:400px\" >\n",
    "Each row represents a customer, each column contains customer’s attributes described on the column Metadata.\n",
    "\n",
    "The data set includes information about:\n",
    "\n",
    "- Customers who left within the last month – the column is called Churn\n",
    "- Services that each customer has signed up for – phone, multiple lines, internet, online security, online backup, device protection, tech support, and streaming TV and movies\n",
    "- Customer account information \n",
    "     - how long they’ve been a customer (tenure is in months)\n",
    "     - contract, payment method, paperless billing, monthly charges, and total charges\n",
    "     - all \"totals\" are over the length of the contract\n",
    "- Demographic info about customers – gender, age range, and if they have partners and dependents\n",
    "- Usage\n",
    "    - information about their usage patterns\n",
    "    - again, usage totals are over length of contract"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Concept: Churn\n",
    "\n",
    "#### Type of churn:\n",
    "\n",
    "**Voluntary** – they left after contract was up\n",
    "\n",
    "**Involuntary** – we fired them\n",
    "\n",
    "**Early churn** – left early, broke contract\n",
    "\n",
    "### Churn is a survival problem:\n",
    "- Predicting who will churn next month is really hard\n",
    "- Predicting who may churn over next 3 months is easier\n",
    "\n",
    "<img src = \"./img/funnel.png\" style=\"width:800px\">\n",
    "\n",
    "There are many reasons to churn &#8594; **feature engineering is king**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solutions need to be tied to root problems\n",
    "\n",
    "<img src = \"./img/solution.png\" style=\"width:800px\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Different solutions have different time frames\n",
    "\n",
    "<img src = \"./img/time.png\" style=\"width:800px\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remember:\n",
    "\n",
    "#### You will not be paid to create intricate models\n",
    "### You will be paid to **Solve Problems**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get Started!\n",
    "\n",
    "## Part 1: Business problem\n",
    "\n",
    "#### End Users: \n",
    "Business decision makers: CEO and business marketing officers\n",
    "\n",
    "\n",
    "\n",
    "#### True business problem:\n",
    "Create actionable plans to reduce the actual churn rate amongst customers and identify the type of churns with the most business impact\n",
    "\n",
    "\n",
    "#### Context:\n",
    "\n",
    "- **False negative** \n",
    "    - **Outcome**: We predict that the clients won't churn but they do \n",
    "- **False positive**\n",
    "    - **Outcome**: We predict that the clients will churn but they will not"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2: Evaluation Metric\n",
    "Which metric (of the ones we've explore so far) would make sense to primarily use as we evaluate our models?\n",
    "\n",
    "- Accuracy\n",
    "- Precision\n",
    "- Recall\n",
    "- F1-Score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We should focus on Recall (primary) and F1-Score(secondary)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 3: Segment choice\n",
    "\n",
    "What type slice/segment/type of churn you are interested in?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initial hypothesis: We would like to reduce early churn since it has the biggest revenue impact"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 4: Data Prep Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colm-m-farrell/opt/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py:3997: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  errors=errors,\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(2229, 42)"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import pacakges\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import plot_confusion_matrix # New to version 0.22.2\n",
    "\n",
    "# Load dataset\n",
    "url_link = 'https://docs.google.com/spreadsheets/d/1TAWfdKnWYiCzKUeDyGL6NzIOv7AxFt_Sfzzax464_FQ/export?format=csv&gid=882919979'\n",
    "telco = pd.read_csv(url_link)\n",
    "\n",
    "# Drop nas\n",
    "telco.dropna(inplace=True)\n",
    "\n",
    "# Train-test-split\n",
    "X_train, X_test, y_train, y_test = train_test_split(telco.drop(columns=['customerID','Churn']), np.where(telco.Churn ==\"Yes\", 1, 0), test_size=0.33, random_state=42)\n",
    "\n",
    "# Separate out numeric from categorical variables\n",
    "cat_var = telco.select_dtypes(include='object')\n",
    "cat_var.drop(columns=['customerID','Churn'], inplace = True)\n",
    "\n",
    "num_var = telco.select_dtypes(exclude = 'object') \n",
    "\n",
    "# Encode categorical variables\n",
    "ohc = OneHotEncoder(drop='first')\n",
    "encoded_cat = ohc.fit_transform(X_train[cat_var.columns.tolist()]).toarray()\n",
    "\n",
    "# Add feature names to encoded vars\n",
    "encoded=pd.DataFrame(encoded_cat, columns=ohc.get_feature_names(cat_var.columns.tolist()))\n",
    "encoded.reset_index(inplace=True, drop=True)\n",
    "X_train.reset_index(inplace=True, drop=True)\n",
    "\n",
    "# Reassemble entire training dataset\n",
    "clean_X_train = pd.concat([X_train[num_var.columns.tolist()] , encoded], axis=1,  sort=False)\n",
    "clean_X_train.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc2537aeb90>"
      ]
     },
     "execution_count": 302,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAeAAAAF/CAYAAACR5BoDAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nOydd7wcZfWHn++9KSSQQpMWagihEyBEOqgBsVH8IUVQUDEWEBsgKiIoKooFpSgBFBClWRAQpQkBEUgCCQlJCIYeQBCQmgRy7z2/P953k8lmy+ydubtzb86Tz3yyO/O+Z87M7t0zbztfmRmO4ziO4zSXtlY74DiO4zgrIh6AHcdxHKcFeAB2HMdxnBbgAdhxHMdxWoAHYMdxHMdpAR6AHcdxHKcFeAB2HMdxnDpI+rWkFyQ9VOW4JP1C0jxJMyTtUM+mB2DHcRzHqc8lwH41jr8PGBW3CcAv6xn0AOw4juM4dTCzO4GXaxQ5ALjMAvcCwyWtU8umB2DHcRzHyc56wNOJ9/Pjvqr061F3HCfB4hcfy5T3dPC6e2T2YcjAwZltdHR1ZrbxVufiTPU7u7oy+6DMFqBfe7afkC7Lfh1tyt6OWKm9f2Ybby5elKl+Vw5pgUevOiKzjdcXL8hsY2D7gMw2/v3f+zN/RRv5zRmw5sjPELqOS0w0s4kNnK6SvzXP7wHYcRzH6Zs08LAcg20jAbec+cD6ifcjgGdrVfAuaMdxHKdvYl3pt+xcB3w8zobeGXjVzJ6rVcEDcM5I+qakWXEa+nRJ7+yGjbGSftGNeuMk3SlprqSHJV0kabCk/SWdHMscKGnLRJ3vSBrf6Lkcx3GKjnV2pN7qIekK4B5gtKT5kj4l6bOSPhuL3Ag8BswDLgQ+X8+md0HniKRdgA8CO5jZW5LWABoeDDGzqcDUBs7bD1gduAY4zMzukSTg/4AhZnYd4ekM4EDgBmB2PNepjfrnOI7TK8hhrkQJMzu8znEDjm3EpgfgfFkHeNHM3gIwsxcBJO0I/BRYBXgRONrMnpN0B3Af8C5gOPApM7tL0t7ACWb2QUmrAb8GNgEWABPMbIak04B1gY2izXnApWZ2Tzy3AX+I5z8aGAv8Htgf2EvSKYQA/S1CQH4CuCheRzuwtZlJ0kjgPGDNeP5Pm9nDki4BXot21wZOMrM/5HUjHcdxMpNP13KP4V3Q+XIzsL6kRySdL2kvSf2Bc4CDzWxHQjD9XqJOPzMbB3wJ+HYFm6cD08xsW+AbwGWJYzsCB5jZR4GtgftrOWdm/yK0hE80szFm9mji2NS4bwzwd+DH8dBE4AvR9xOA8xMm1wF2J7T6z6x0TkkTJE2VNPWiy66o5Z7jOE6+dHWm31qAt4BzxMzeiK3dPQit2quAMwjB8ZbQK0w7kByY/1P8/35Ca7ac3QktVczsH5JWlzQsHrvOzBbmeQ2SDgF2APaVtAqwK3BN9B1gYKL4tWbWBcyWtFYle8mZhVmXITmO4zREwVvAHoBzxsw6gTuAOyTNJIwJzDKzXapUeSv+30nlz6PW2rI3E/tmEVrEf2nU5yUnkrYitLj3NLNOSW3AK7FVXIm3Eq/zWFbqOI6TG2kmV7US74LOEUmjJY1K7BoDzAHWjBO0kNQ/Brq03AkcEevuTRhjfq1CuXOBo5KzriUdKWntsnKvA0Mq+D4MuBL4uJn9FyCe53FJH4llJGm7Bnx3HMdpHV1d6bcW4AE4X1YBLpU0W9IMYEvgVOBg4IeSHgSmE7p103IaMDbaOxM4qlIhM3seOAz4cVyGNIfQFV4erK8ETpQ0LU6wKnEgsCFwYVw+NT3uPwL4VPR9FiHfqeM4TvFp7jrghpHlkP7McdLgqSiX4qkoA56KcimeinJZ8khF+dbDk1Lf1IGb79X0YTQfA3Ycx3H6Jj4Jy3ECWVuwC569K7MP62xSS84zHSv3XymzjcUZW9GrDl4lsw8vLag0laAx2pSt0bC4M/sPpCl7y1H9srfYRgxZM1P9p197IbMPmw18R2Yb/+uffWHFjV/fPLONXGjR2G5aPAA7juM4fZOCz4L2AOw4juP0ScKq0OLiAdhxHMfpmxR8DNiXIfUhJA2XVFeBw3EcZ4XA1wE7TWQ4KSSwshCVlxzHcYpPwdcBewDuW5wJjIyJNM6SdKKkKVGb+HQASRtJmiPpwqhbfLOkQfHYHZLGxtdrSHoivj5a0jWSricITlDJtuM4TqEouBiDB+C+xcnAozF38y3AKGAcISXmjpL2jOVGAeeZ2VbAK0SxhzrsAhxlZu+WtG8N28uQVEPq6nqzUhHHcZyeobMj/dYCvDux77Jv3KbF96sQguZTwONmVko1WU2FqZxbzOzlOrbvLK+UVEPqP2A9T7vmOE7zKPgkLA/AfRcBPzCzC5bZKW3EsipGncCg+LqDpb0i5dkmks3XirYdx3EKRcETcXgXdN8iqXR0E/DJqOmLpPUk1UuT8wRB0hCCgEQ1umPbcRynuRR8FrS3gPsQZvaSpLslPQT8Dfg9cI9CusA3gCMJLd5q/Bi4WtLHgH/UOM/NkraoYDt7Lj3HcZyc8EQcTlMxs4+W7fp5hWJbJ8r/OPH6YWDbRLlT4v5LgEvKzvPzKrYdx3GKQcFTUbocodM0VhsyKtOXLWvif4DnHvt7ZhuDcpBFzHoteUjwdbZo6UXe5PEL1t7W+tG4rhy6Qdvb2jPbyON7Maj/wMw2Xnvzscx/8Atvm5j66zHoPRNcjtBxHMdxcsFnQTuO4zhOCyj4LGgPwI7jOE7fpOAt4NYPfEQkmaSfJN6fIOm0nGxfIqnWspru2t0o+v3dxL41JC2WdG6duvtLOjm+Pk3SCQlfF0gakij783ieNfK+BsdxnD5LwZchFSYAE5JDfLhoQUZSvVkNjwEfTLz/CDCrnl0zu87MzqxyeB5wQDx/G/Au4Jn63jqO4zhLKHgqyiIF4A5CysIvlx8ob8FKeiP+v7ekSZKulvSIpDMlHSFpsqSZkkYmzIyXdFcs98FYvz2KFpREBT6TsHu7pN8DMyX9MCnzF1usX41vFwJzSiIGwKHA1YmyH5J0n6Rpkm6VtFbcf3SNVvIV0Q7A3sDd8f6UbB4Zr3G6pAvidbTH+/RQvPYvx7LHS5odr+/KuG+cpH9Fn/4laXTcPzjeyxmSrop+l8QZ9pV0j6QHojBDKQnHmQn7S5Y0OY7jtJyCt4CLNgZ8HjBD0o8aqLMdsAXwMqE1epGZjZP0ReALwJdiuY2AvYCRwO2SNgU+DrxqZjtJGgjcLenmWH4csLWZPS5pe+Bs4Px47BBgP5Y+wFwJHCbpP4REF88C68Zj/wR2NjOTdAxwElAK3tX4N3CApFWBw4HLgfcBxAQYhwK7mdliSecDRxBa3euZ2dax3PBo62RgYzN7K7HvYWBPM+uQNB74PkGQ4fPA/8xsW0lbA9OjrTUIa4LHm9mbkr4GfCU+QBwEbB6vr2R/CZImABMABg9ck4H9h9W5dMdxnJwo+BhwoQKwmb0m6TLgeELLMg1TzOw5AEmPEuXygJmErtsSV5tZF/BvSY8BmxMEBbZNtK6HEUQF3gYmm9nj0a9pkt4haV1gTUKQekohrzLA34HvAs8DV5X5NwK4StI6wADg8ZTX9SfgMOCdwGcS+99DSBc5JWahGkTIQHU9sImkc4C/Ju7DDOB3kq4Frk1c56WSRhGWUfaP+3cnJtcws4ckzYj7dwa2JDygEK/jHuA1YBFwkaS/AjeUX0RSjCHrOmDHcZyG8FnQDXM28ADwm8S+JSIBChFgQOJYUligK/G+i2Wvr/zH3wiiAl8ws5uSByTtzbLiAwB/IORHXpvQ4l1qyOxtSfcTWrZbAR9KHD4H+KmZXRftnkY6riTch0vNrEtLEzco7vt6eQVJ2wHvBY4ltNI/CXwA2BPYH/iWpK0IDwu3m9lB8SHijoTtSoighnR4hXOOIzwUHAYcB7w75fU5juP0LAVvARdpDBiAKHl3NfCpxO4nWCoScABLW2yN8BFJbXFceBNgLkFU4HOS+gNI2kzSylXqX0kIMgcTgnE5PwG+ZmYvle0fxtIJVEelddbMngK+ydJu7xK3AQcrih9IWk3ShrGbuM3M/gh8C9ghTuBa38xuJ3R9DydIByZ9Ojph+5+EwI2kLYFt4v57gd1it31prHizOA48zMxuJHT1j0l7fY7jOD2OjwF3i58QWlMlLgT+ImkyIQB1R9l9LjAJWAv4rJktknQRYWz4gdiy/i9wYKXKZjZLYWnQM6Uu7/LjVJ79fBpwjaRnCIFs47QOV5L7M7PZkk4Bbo4BdjGhxbsQ+E3cB/B1oB24XNIwQiv2Z2b2Shxjv1TSV1hWdOH8uH8GQet3BmGM/L+SjgauiGPlEMaEXyd8LitF+8tNoHMcx2kZncVOt+q5oJ0lKCy56h8fTkYSHnY2M7O387DvuaCX4rmg88NzQS/Fc0Evy8Irvp0+F/Thp3suaKelDCbMEO9PaNF+Lq/g6ziO03R8EpbTWzCz14GxdQt2k46MT9Yr918psw95tF4XPntXZhuDM/rRmYPOaRFaS/3as/8E5dFiy6MnUBl7NQb0687UlmXpzCHgtOXQG7C4KL0rOU7CkrQfYZVIO2G565llxzcALiXMtWkHTo7zY6rS+n4Xx3Ecx+kJcpqEFYfnziPkY9gSODxOVE1yCmG56/aECbvlE2iXw1vAjuM4Tt8kv0lY44B5ZvYYQMwqeAAwO1HGgKHx9TBCQqaaeAB2HMdx+iYNdMkns/ZFJsZEQgDrAU8njs0nJElKchphdcoXgJWB8fXOucJ3QUtaPeZUni7pP5KeSbwfUKH8apI+m8JuP0mvxNebSloYcy/PiTmWP5bB52MU1JH2Suz7SNx3YHz/G8Ucz92wv4mkw7rrn+M4TiGwrtSbmU00s7GJbWLCUqUB/vKJA4cDl5jZCOD9wG8Ty0IrssK3gGPijDEQRBaAN8yslqjAasBngV81eKq5cWyAmNDiz5Iws9827jUQUm0eTljbDGHM4cHSQTP7RDftQkhUchhlGb8cx3F6E9aV2zLb+cD6ifcjWL6L+VMEjQDM7J6YH2ENQqrgiqzwLeBaSDpJQV3ooditAHAmMDq2kM+UNFTSPxRUgmYoKi3VwszmEdJWHh/Ps7OC0tA0SXfHHM0oKBVtnfDnvphKEkL6yF1jS3sosAHwUKLsPyWNKbXEo68PxvOUsmhdXmoxx/dvJK7xXfEaj482fqqgwDRDQVQCSevF80yP92jXbtxmx3GcniG/TFhTgFGSNo49o4cB15WVeYqQlrckmrMSIblTVTwAVyHmOD6CMPi+C/B5SdsS1IXmmtkYMzuZkIHqADPbgdDn/7OUp3iAIAgBMAfYPbaQvwucEfdfTEwVWZpxFzNuQch1fUc850EsFVqoxDBgkpltRxBR+GQd304m5IoeY2a/IIyLvGBm44CdgGPjlPsjgevNbAxBlWpGuSFJEyRNlTT17Y7X6pzWcRwnRxrogq5pxqyDkJ3xJsLv9dUxO+J3JO0fi30V+LSkBwmSskdbnfVtK3wXdA32AP5oZgsAFNSEdmepylAJAT+UtDshKK6vkJf5lTr2k2MKw4HLtKx+MYQu4OmSTiYEzd9UOD6BkF7zOOD0KudaaGZ/i6/vj9fWCPsCWyTGhUuqUVOAC2JXy7Vm9mB5xaQa0tCVN/G0a47jNI+O/NYjxzW9N5btOzXxejawWyM2vQVcnbSr6j9OCEg7xJbgi4Suh3psT3iSAvgecFPU8j2wVN/M3iS0cvcn6PVeUWbjHmAHYKiZPVrjXMlsVp0sffBKqky1U/2BTMDnY4t4jJltbGa3mdk/gL2B5wiSh0fUvGLHcZxmUnAxBg/A1bkTOEjSIAXVnwOAuwgCBEMS5YYRumc7JO1DmK5eE0mbAGcRpApLNiqpEwFcBJwL/MvMXk0eiN0bXwe+0cB1JXmCpSpTBxGyt8Dy13gToQu+X/R/dLwvGwL/ia3cSwgPFY7jOMXALP3WArwLugpmNlnSFYRuVoBfmtlMgDimOZMgfP9T4HpJUwnjuv+uYnK0pGnAIIKQ/U8SM6B/CPxa0knA7WV+3CdpAct3P5eO/7XbFwkXENSM9iF0rZe0lKcB7XEs42JCBpgNCN3hEGb1HUCYcPAVSYuBNwhjwo7jOMWg4LmgXQ2p4EhaH7gF2KLegH7RyToGnEcu6P8ueLV+oToUIRd0Hngu6HxRxlzQ/XL5PLIHHMtBXyoPta6FC5/MrE604MfHpL6YwSdc5GpIzlIkfQL4DvDF3h58Ad7qXJypfh4J3vOQNMwjeC7IGMSHrv+uzD50dHZktpFHAM1KHg8SedyLrH48vFX5HMzG2XxWrakgzaM9hwCcCzmKMfQErf/rcapiZr+hStez4ziOUxvLcRZ0T+AB2HEcx+mb5JcJq0fwAOw4juP0TQreBV2QjvreSW8Ucog2PyDpfkmzJT0s6Yd1yh8j6ez4+gxJX8pyfsdxnKbQZem3FuAt4Az0RiEHSdsBZwMfMLNH4treTzdqx3Ecp/AUfBmSt4B7iAILOXwN+K6ZPRLtdZjZL2OZA2K5aZJuLok21LjGL8dW9IOSLm/8LjmO4/QgnZ3ptxbgLeAeoEzIoR2YLGkSQeRg05iyEkn9CUIOr8dgdzdwQ4pTVBJy6JS0H0HI4VCWCjmckBRyiEH5e1Xs3glcZ2YWu8q/SgjY1TgJ2NDM3pY0PIXfjuM4zcMnYa2Q9AYhh0psAFwtaW1gIPBInfKzgMsl/YUqakySJhAEI2jvN5z29lVSuOE4jpMd8y7oFZIiCznMYmn+53LOA35mZtsAn0/hy3sJ49njgKlR0GEZzGyimY01s7EefB3HaSoFn4TlAbhnKLKQw4+AU+JkLiS1S/pK0pZCTr2j6vjRDoyIikgnAmsCg+v57ziO0zQKHoC9C7oHKLKQg5lNk3QCoat5EGDAX+Lh04A/A/OBycA6NS6zH/B7SUMID3I/NLPXa90Xx3GcplLwdcAuxtCHKZqQw8CV1s/kQx4J3vNI3J/HrfRc0MWiCPfika03zexDX8oF/dqbj2VO3P76lz6U+o91yNnXN12Mwbug+yhRyOFfwDeKEHwdx3GajndBO62giEIOWaXSVh2cfRLXK4vezGyj07K3orO2YF97+vb6heqw8np7ZrbRlbGLryuHWapZZQCBHAT4st+LTWfWW3RQn6L0Eg0cMCizjVwo+CxoD8CO4zhO38TXATuO4zhOC/AA7DiO4zjNxzqL3QXtk7BouqrR9MR2RDf9nS/p9rJ9D0maHl+/U9LPumM71v9kzIblOI7Te/FJWMWnyapGY7rl5PIMl7SumT0raRtgyToKM7sPuC+D7U8S1iX/J6OPjuM4LcMK3gXtLeA69JSqUcL+FyR9P/H+mFLrVdJRkibH85wvLTPF8RrgkPj6cJammkTS+Jh/uqTfe7GkSZIek3Rs3L9pqcUc358s6RRJhxIeRq4q9QBI2inWv1/S3yStFeu4GpLjOMWl4C1gD8A1KFM12gX4vKRtCapGc81sjJmdDCwkqBrtAIwHqnX/loJ2aduVEEgPTpQ5lBD8tgYOAnaNreZ+wGGJcsl67ydk1qrGZsA+wM7AdyrlbC5hZlcB04FD43kF/Bz4PzPbEbgc+G4sfhIwxsy2A46rZE/ShJj9a2pXV/YlQI7jOKnpamBrAd4FXZu8VY0qdkHHMd2xwFPAxoTu4y8COxFEDiCkoXw6Ue2/wJuSDgNmAItqXMcNZvY28IKklwl5m9OyBbAVcGv0o52QqhJSqCGZ2URgIkC/AesVuz/IcZw+RdG7oD0A16Y7qkYdkuaTTtWoxFWE7uQnCAHfoiDCr83sW3XqnQccWcf+W4nXnYTPvYNle0BWIjGOnEDADDPbo8Kx9wJ7EcQmTpG0tVkOWSocx3HyoKPYAdi7oGvTY6pGZfwB+DChi/mquO9W4JDYki7N1N6grN4fCepGtzR4PggTrNaVtKqklYAPJI4lr282sF7sjieOCW/lakiO4xQd67LUWyvwFnANekjVaHri/YVmdp6ZvSRpHjDSzB6I554p6XRC128bsJgw8/qphH+vEtSQGk7HZ2aL4uSvKcBjhEBb4jfARZIWEsa/DwZ+EZWP+gE/AebhakiO4xSZYi8DdjUkp3lkHQNeY/DQzD7kkgs6h1y5WZVzipILOmse5qLkgu7K4Xewva31HYpFyQW9Sg65oF9+/d+ZP9iXD9or9Qe72p8nNV0NyVvAjuM4Tt+k4C1gD8BO08j6ePnSgtdy8SMr7W1VV3GlJqv+bB6t1zefuTOzjUHrVpqbl56mNzmq0C+PzzRjy/GpsZtl9mHjB+ZltpFHK/rNxbUWZTSPjAJVPY4HYMdxHKdPYtmec3uc1g9aOI7jOE5PkGMiDkn7SZoraZ6kk6uUOSRmB5wl6ff1bHoL2HEcx+mT5NUFHZddnkfIKDgfmCLpOjObnSgzCvg6sJuZ/U/SO+rZ9RZwDqj3qSkNlXShpEfjk9odknaqU2e+pOFJnxzHcYqMdaXf6jAOmGdmj8WsglcS8kIk+TRwnpn9D8DMXqhn1FvAOdAL1ZR+DcwBNo1ZtzYFRuVg13EcpzA00gKWNAGYkNg1MabShZBcKZkKeD7wzjITm0U7dxNS9p5mZn+vdU5vAfcwKpiakqTRhIeFb1tcBG5m88zsb7HO9VH1aJakY+qcez1J/4z2H4riEo7jOIXAOpV+M5toZmMT28SEqUoT9svXGPcjNGT2JijUXSRpeC3/vAXcg5SpKbUDkyVNIqgpbVpqzUrqT1BTej2OG9wN3FDBZHkmrc8TVJHuBL4R9x0KfKtMTalD0kRCqstFwDSzqs+GR5nZy5IGE4Qg/ljqUqnAkcD1ZvbDOEay3Or75FNlW/sw2tpWrmLKcRwnX6wrt4Vu84H1E+9HAM9WKHOvmS0GHpc0lxCQp1AFD8A9SxHVlGbV8fnLkvaPr0cAI4GpVcpOAS6IuaSvNbMHywsk1ZD6uxqS4zhNJMd1wFOAUZI2Bp4hNGY+WlbmWkLL95L4+70ZIc1vVTwA9yyFU1MqdUFLaitvBUsaD+wJ7GxmCyX9s5YfZvYPSXsThBx+J+kHZva7Bvx2HMfpMczyaQHH3+XjgJsIvZm/NrNZkr4DTDWz6+KxfSXNJqjOnRjnB1XFA3DPciehhXgW4UM7gNBF3BNqSvcRukS+FPfdCvxB0s/N7EVJqwMrm9ncKCJxqqTTY7AeTXhaGwC8HIPvVoQWdFUkbQjMN7OJkoYC2wMegB3HKQR5ZsIysxuBG8v2nZp4bcBX4pYKD8A9SIHVlD4RzzlPQfHov8AJhO7pCZIeBB4mBPVavAf4iqTFwBvU1yV2HMdpGjmOAfcIrobkNI2+MgacRy7orIozykEBqK/kgs7jXuSR/7iv5IJWDp+KLTdBuHHeWvR0Zkee3GF8akc2fOBWV0Ny+i5ZJfjacvihfbtjcWYbRZAj7Mqhby1r8ARY+OxdmernISqRR/DMI2Bk/X5u8sCjmX3IQ94xD/J4KMqDoreAPQA7juM4fZKid/B6AHYcx3H6JN4CdhzHcZwWkNcypJ5ihUhF2USxBJP0ucTxX0k6Mr7+nqR31bF3hqQvVdi/jD+Jc307sW8tSR2Szo7vj1X3xRraVEVuy3Ecp7eQoxhDj7BCBGAze8nMxsQsUr8CflZ6H5UtyimJJTTK84RMUsv1LJjZN83s9m7YrObPPGD/xPtDgIcS5zsvQ1KMNkK6TMdxnF5LZ1db6q0VrBABuBY5iyX8B7gL+FiF81wu6cD4en8FYee7JJ0TU1SW2EbSJEmPSTq2kj9x35vAo5JKqSkPIeSFLp1vSWs6CiacqSDMMLckmqAg3HB2os7fYzrMM4Eh8XyXxWOVhB36SfqtpJnx/h2f7q47juP0PNal1FsrWKHHgJW/WALAD4DrJF1a5ZyDgfOB3QhJMa4uK7IZIcHFcGCOpF9V8GfTWPZK4LDYDb6A0AJfs9rlmtk4hTzPpwL7VSlHPN8xifNVE3Z4FFjDzLaJ5ZZT/lBCjKFfv9Xo12+VGqd1HMfJj6LPgl7RW8BLxBLM7HVCMu3dK5QriSXMIAgplMQSlsPM5gHTCSknK7ElQVThyZi67Iqy4zeY2dtRzPllqgdUCGnR9iMEw6tqlAP4U/z/fmCjOmXLGc9SYYfpwF4EkYZ5hJb5zyW9F3i1vGJS4suDr+M4zcRbwMWmp8QSvgf8Hri3G+d8K/G6kxqfkZktig8FXwS2AA5OYTdps4NlH8KqXVNFYQcASdsC7wOOB/6PZQWtHcdxWkaXz4IuNHcCB0kaJGkVgljCXWQUSzCzWYTu2fdVODyL0GpcXyFdTLWWcpJyf5KcBZxkZuXShWl4AthegY2AHSEof0CY5R3L3QocUmr1x1nlG0hak9C1fQ3wbWCHbvjgOI7TI3R1KfXWClboFnAPiCUkOYPQ3Vt+zgUKsla3EkQQphBmOdfy8/kyfy5KHJsJzEzhTyUmEbQtZxJmUCeFHi4GZkiaamYfV2Vhh07g4vggYcDXuumH4zhO7hS9BexiDC1A0ipm9kYMXBcAM83snFb71dMMGrRhpi9bUXJB50ERckF35pA32HNBJ2xk/C3N4zryyFOeB8rjb/Wt+ZmNTNvggNQfyvZP/aXp0XpF74JuFZ+Lk5lmA4OAC1vsj+M4Tp/DLP3WClboLuhWYWZnEcZuVyiyttoWd2ZvseXxiJu19ZoHeaje5HEvsrZg85BEXGXEXplt5NEb0N6WrT0zZ/TozD6MmjM7s408KErPatG7oFv/S+I4juM4PUDRc0F7AHYcx3H6JJ0egB3HcRyn+RS9C9onYdVBfUxJKe7bXNLfJP1b0hxJV8YUm9VsbxonjSFpfFnuasdxnEJiptRbK/AAXIe+pqQkaRAhj/U5ZjbKzLYgzMJevZv2HcdxCklXA1sr8ACcAfVOJaWPAXea2Y2lSmZ2m5nNkTQy2p0m6X5J76xz/e+W9GC0/YCkldPcN8dxnGZgKPXWCnwMuJv0YiWlX1AhQ1fkOWCfmGN6c+BSoFYQPhGYYGb3xVSeiyr4vEQNqb3fcNrbXZDBcZzm0FWM1VBV8RZw9+ntSkqVGEhILUWunfYAACAASURBVPkQQepwyzrl7wbOjq3/oWa2XBqepBqSB1/HcZpJJ22pt1bgAbj7dEdJaQzwIvWVlE6uYj8PJaVZRNGFCnwVeBrYhtCyH1jrZGZ2BvAZYBVgiqRRdfxzHMdpGj4G3HfprUpKvwX2krRfaYek90vaMvr6XGxdH0WdgC9ppJnNMLMfANOA7Kl8HMdxcqLoY8AegLuJmU0mdAFPIej+/tLMZprZ8wTh+plx0tNvgV2jktJHSK+ktH6Fcy4ASkpKdwHPAq/W8XMZf6KNDxFmXP9b0mzgSIIy07nAMZLuBTZk2RZ1JU6IE9BmAK8Qutgdx3EKQdFbwK6G1MvozUpKA1daP9OXLY98vX0lF3RHZ0erXQCyq954LuilPDx688w+FCUXdB50vP1M5j/XG9c6LPVvzvufv7LpzeDW/5I4jfI5SUcQxmen0ouUlLLKrZmyPyx25fDAmYfkW3tbe6b6eci95UHWz3TIiL0zSwG+MX9SpvoAq284PrONRR2V0gKkZ/TDczL7MLBf/8w2BrRlDwuvv70ws4086CzI30k1PAD3MlZUJSWnb5KHDq/jVKOrRWO7afEA7DiO4/RJiv545wHYcRzH6ZO0anJVWnwWdBlNFF+YXqd8m6STa9Q3Sd9OHF9LUoeks+P7Y+NYccOUn9txHKc30iWl3lqBB+Aymii+UI82QkKOaswD9k+8PwR4qPTGzM4zs9/10Lkdx3EKjzWwtQIPwA2Qs/hCyeYxkv4g6aa4LvcHCbtDot3LKlR9E3hU0pj4/hDgmoTdJfKEkv4ZfZschRx2TZz77ESdv0vavdK5JR0V60+XdH5sJfeT9Nu4xvghScc3ek8dx3F6ig6l3+ohab/4+zmvVg+hpINjD+XYejZ9DDglPSS+UGI7YAegA3hE0jnR7jEJu5U+qyuBw2LX9AKCpGG1/M8ys3GS9gdOBfarUo4K594aOAjYNWb0mggcRsjYtYaZbRPLDa9znY7jOE0jr1nQktqB84B9gPmE1LvXmdnssnJDgOOB+9LY9RZwenIXX0hwq5m9bmYLgYeBDVL6dCMhkB4GXFWn7J/i//cDG6W0X2I8sBMho9Z0YC9gJKEbfLSkn0t6LxWyckmaIGmqpKkdHW80eFrHcZzuk2MX9Dhgnpk9FocirySkHy7nu8CPqKAMVwkPwOnpKfEFSCeisBxmtgiYAXyRpQG23jmS9jtY9jtQzU8Bv06MhY82s++a2UvAtsA/CU99F1TwcYkaUr9+robkOE7z6FL6LdlYiNuEhKn1CEI1JeZTltdf0vbA+mZWr8dzCR6A09Mj4gvVMLMOqNr1nOQs4CQze6Ubp3kC2F6BjYgqSRXOfStwSKklH2eKbyBpTULX9jXAtwnd6I7jOIWgkVzQycZC3CYmTFVqgC1pOEtqA35GUJRLjY8Bp8TMJksqiS9AFF8AiE9LM4G/Aj8FrlcQX3iAdOIL1bgYmBFtfbKKXzOBmd20Pwl4JtZ/iKBFvNy5zezjkk4Hbo1ftMWEmd+dBP1gEb6MX+umH47jOLmT4+zm+SwrkDOCIIZTYgiwNXBH+DlkbeA6Sfub2dRqRl2MwWkagwZtmFGMIXsO5jxyQbflsGYway7oPO5FHmTO753DT2RfyQWdB/1zEAopSi7oPMQYLhxxZOov2KfnX171fLE38BHgPYRGyxTgo1E+tlL5O4ATagVf8C5ox3Ecp4+SlxxhHJY7DrgJmANcbWazJH0nrizpFt4F7TSNldqzKbWo33KJyBrmzcWpJifWJI9eo6xygnn0W/XL2AoPfmTzJA8ZwDxary89eWtmG0NG7J2p/jorr5rZh/8s6M5UkGV5I4fWax6qTHlgOSa4MrMbCStPkvtOrVJ27zQ2PQA7juM4fZKi54L2AOw4juP0STwAO47jOE4L6Cy2HLBPwsoT9QIlpfh+c0l/i7mn50i6MqbNrGZvyTkljZd0bT2fHcdxWk1ek7B6Cg/AOdIblJQkDSLkpj7HzEaZ2RbAhcDqPeCH4zhOy/AA7ACFUlL6GHBnnNEHgJndZmZzJI2UdJekaZLul/TOOud/t6QH43kekLRyY3fFcRyn5yi6HKGPATeBgikpbU0QZKjEc8A+ZrZI0ubApUCtIHwiMMHM7ovpOZdb4xPzqU4AGDRgTQb2H1rnchzHcfKhy8eAHYqppFSJgYTUkg8R1D62rFP+buDs2KIfambLpWdK5lf14Os4TjPxLmgHiqWkNIsoulCBrxIUP7YhtNYH1jJkZmcAnwFWIehjjqpzbsdxnKbRiaXeWoEH4OZQJCWl3wJ7SdqvtEPS+yVtGc//nIVUT0dR58FB0kgzm2FmPwCmAaO746/jOE5P4C1gBzObDJSUlO4lKimZ2fMEkfuZks4kBMddo/rRR8hHSWmZSVhmtgD4EPDlOHFrNnAk8F/gXOAYSfcCG7Js67oSJ8RJZTOAVwjd5o7jOIWg6JOwXA3JaRqrrrJppi+bclAhKkou6Kw2PBf0Ugb3rzlSkgrPBb2UrHnKAQbkkAv6zQVPZP6DP23DI1J/QU978ndNn7Lls6CdppFH8BsxZM1M9YcPXIVn3ngxk408HgSyyhECdFm24NWRg6RhVmnGNinz/Xyrc3HmB5qswRPg9fl3ZLaRhx/tbdk6NgfmIHoyZMCgzDbyoOizoD0AO72GrMEXyBx8i0LW4FsU8niY6Su9eEUIvn2NVk2uSosHYMdxHKdPUvTHVA/AjuM4Tp+kq+At4ML3V0haO4oFPCpptqQbJW3WoI0D4zKbpiLpgzGt44PR98/kZHf/pNhCg3VXkXRBvJ+zJN2ZIuXkE6WEIJLe6M55Hcdxmk3RZ0EXugWsMED0Z+BSMzss7hsDrAU80oCpAwkpHWfn7mQVJA0EJgLjzGx+fL9RA/X7ldbzlmNm1wHXddO1i4DHgVFm1iVpE2CLbtpyHMcpLEXvgi56C/hdwGIz+1Vph5lNB9olLcmRLOlcSUfH12fG1uYMST+WtCuwP3BWFA0YKWmMpHtjmT9LWjXWvUPSz2KrcI6knST9Ka6XPSNxviMlTY72LpDUHve/Iek7ku4j5FDuB7wU/X7LzObGcmtK+qOkKXHbLe4/TdJESTcDl0m6T9JWifPeIWlHSUdLOjfuWytew4Nx27Waj5JGRr9OMQuzeMzsMTP7a6xzrYIIw6yYw7kqktaJ92l6XAu8R8OfruM4Tg/ShaXeWkHRA3At4YDlkLQacBCwlZltC5xhZv8itBZPjLKAjwKXAV+LZWYC306YedvM9iTICf4FODb6cbSC3u8WwKHAbjFdZCdBaAFgZeAhM3unmd0Zz/ukpCskHSGpdL9/TpAq3An4P0KrtMSOBEGGjxLyMR8Sr20dYF0zK78fvwAmmVlJlGFWDR+3AqZXytkc+aSZ7QiMBY6XVEui8KPATdH+dkBNjWLHcZxm09nA1goK3QXdDV4jKPJcJOmvVFASkjQMGG5mk+KuS4FrEkVKXbszgVlm9lys9xiwPkFEYUdC7mOAQcALsU4n8MeSITM7RtI2wHjgBGAf4Oj4fsvEEoyhkkopKa+LwgoAVwO3EB4QDinzs8S7CTmkiYH1VUkfq+LjAxXqJzle0kHx9frAKGILvgJTgF8rKDhdG3smlkMJNaT29uG0tbtioeM4zSFropiepugBeBZwcIX9HSzbel8JQg5kBem/9wCHAccRAlQjlNIvdrFsKsYuwv0SYUz66xXqLipvXZrZTGCmpN8Sxl6Pjr7vkgi0wJI1kW8m6j4j6SVJ2xJatGkncVX0MXZBbyeprdQFnTi2N+HBYBczWyDpDmoIQZjZnZL2BD4A/FbSWWZWrj2MmU0kjIUzYOCIYv81OI7Tp/Ax4Gz8Axgo6dOlHZJ2ImjqbilpYGzRviceWwUYFsXmvwSMidWWiB6Y2avA/xJjlh8DSq3hNNwGHKyg14uk1SRtWF4ozjbeO7FrDPBkfH0z4eGgVHYM1bkSOCle18wq/nwu2mmXNLSaj7H7fSpwepzghqRRkg4gCDH8LwbfzYGda92EeM0vmNmFhLzTO9Qq7ziO02x8DDgDUZXnIGAfxWUzwGnAs4Tu2RnA7whKPBCC7A0K4gCTgC/H/VcCJyosCRpJUPo5K5YbA3ynAZ9mA6cAN8f6twDrVCgq4CRJcyVNB04ntH4BjgfGxklgs4HP1jjlHwit+aurHP8i8C5JMwnj5VvV8fEYYG1gXqxzIeF+/h3oF8t/lyAaUYu9gemSphHGsX9ep7zjOE5TKfoyJBdjcJpG1i7ovpSKsk3Znn3zSEWZhxBC1lzQKkgqyqyfB2TPBV2UVJRKLV9enTxyQT/3yuzMjnxmo4+k/nJc8MQ1LsbgOI7jOHnguaAdJ9KVsaXy9Gsv1C/UBPKQWnt4q5GZ6m86s5E8NJV5amxDCeUqsskDj2aqP2f06Mw+jH54TmYbeUgBZm3B5qGmNHT9d2W2kUeH7EsLX8vBj+wUfRKWB2DHcRynT+LLkBzHcRynBXgL2HEcx3FaQNZhr56m0MuQHIjpL6fH7T+Snkm8H1Ch/GqSai1rKpXrJ+mVxPvNJf1NIe/1HAUFqnfUqL9pXF6FpPGSru3uNTqO4/QEnVjqrRV4C7jgmNlLxIQikk4D3jCzH9eoshphXfGvapRZBkmDCGk7j49JTJD0HmB1lqbZdBzH6VUUfQzYW8C9GEknRSWihyR9Ie4+ExgdW8hnShoq6R+SHoiJPz5YwdTHgDtLwRfAzG4zszkK6lF3xSQm96uOdrDjOE5R6GpgawXeAu6lxJzXRwDjCKk5J0uaBJwMbBpViohiCQeY2euxS/lulhepqKU69Rywj5ktiikqLyVIGqb1c4kYg9qH0dbmYgyO4zSHVqWYTIu3gHsvewB/NLMFZvY6cC1BqakcAT+MKSZvBtaXtEYD5xkIXCzpIUJKzy0bcdLMJprZWDMb68HXcZxmYg38q4ek/WJq4XmSTq5w/CtaqkV/WyWNgHI8APde0qZN+zhBaGGH2Cp+keVVjmYR5Asr8VXgaWAbQmt7YOOuOo7jNJ+8uqAltQPnAe8jNEIOl1TeGJkGjI06838AflTPPw/AvZc7gYMkDYoqUAcAd5FQfooMI6gWdUjaB1ivgq3fAntJ2q+0Q9L74xdsGPBcFMY4ivSB33Ecp6V0WlfqrQ7jgHlm9piZvU3oDTwgWcDMbjezBfHtvcCIekY9APdSzGwycAUwhfBh/9LMZprZ88BUSTMlnUkIrrtKmgp8BPh3BVsLgA8BX47LkGYDRwL/Bc4FjpF0L7Ahy2okO47jFJZGWsCSJkiamtgmJEytR+gJLDGfyo2ZEp8C/lbPP5+E1Ysws9PK3v+ICt0cZnZo2a5qk6aGJ+rMBt5bocx/Cd3PJU6J5ecRl0eZ2a3ArbW9dxzHaS6NLEMys4nAxCqHK/X8VTQu6UhgLLBXvXN6AHYcx3H6JDnOgp4PrJ94P4Kgo74MksYD3wT2MrO6vYUegJ2mMXrVukMiNdlsYNXEXKn52wsPZraRh47u5rOyqQjloV+78QPzMtvoyngvRs2ZndmHgTmoU/1nwSv1C9UhqxZvHkpGrz19e2YbHTf9JrONud/I/neWBznq3U8BRknaGHgGOAz4aLKApO2BC4D9zCxVAiMPwI7jOE6fJK8EG3ES63HATYS8C782s1mSvgNMNbPrgLOAVYBrJAE8ZWb717LrAdhxHMfpk3TmmOMqZgq8sWzfqYnX4xu16QHYcRzH6ZPk2AXdI9QctGiGEk9SVSdx/AxJX4qvvyep5uBIsnyF83QmfL5f0s71/EtDJb9rlF1f0lVVjv1T0hhJbcnsKrXsS7pc0huSVk7sO0+SSRouqV3SXY1eU8LWu/O6T47jOK2iC0u9tYKaAdjMXjKzMTGD0q+An5Xex8XI5ZSUeHLDzL5pZllmFryeuIZTge/l5FpqzOzpCkuDymkj5HFOy2OEtbulLC17AP+J5+s0sz2642vk3YAHYMdxejV5pqLsCbo9bS9HJZ5657lc0oHx9f4xF+ddks4p06DdRtIkSY9JOraKuaHA/6Ktir7FludDki6WNEtBI3eleGynWPYeEg8akm4upSWLCTC+EV//QNLRWlY7d7Cka6KdK1maFvJMYEi8d5fFff0q+RG5AigF9fcAk4DOeI5kD8N4hbykf4r3rmQbSfMlDY+vd5Z0q6SRwDHAidGXXSWtFetPlTS51DqOLeUHY7kHki1yx3GcVtNllnprBd0aA1a+SjwQg3bi/dqEgJQ852DgfGA34Cng6jIbmxEC0XBgjqSSHu6QaHulaLfUnb2whm+jgcPNbKakPwEHElKPXQJMMLO7Jf0sce47gT0kPQcsYqkowu7ARSy7iPs44H9mtq3CtPWpcf/JwDGJe7dpDT8A5hBSUQ4DDo/nOYjK7EDIX/oCcK+knc3s3koFzexRSRcBL5rZ2dGXq4Afmdm9kjaK92lr4MR4P+5TSIe5qNyeEmpI6wzZiFUHZV9K5DiOk4bOPqqGlLcSz9xE1/YYQjApZ8tY7smYl/iKsuM3mNnbcf3Vy8CacX+pC3pz4INAqQVYy7d5ZjYzvr4f2CgeG2Rmd8f9v02c+y5gz3hf/gKsGh8Y1jOz8gWfewKXA5jZNIIQQjWW86Ps+LWE9Wg7AP+qYedeM3vOzDqB6RXs1GM88Kv4IHMt4foGER5azo49IEOj/WVIqiF58HUcp5kUfQy4u7Ogu6PE0yFpPssr8eR1zmTWkU4qXJuZ/VPSupJWAz5cw7dqtqp9SvcRHhqeBa4nZEn5NDC5Svm0n3a9a7qSsED8IjMzqeotqmang6UPYbU+FwHjKoz7nyHpOuADwBRJe5vZcrmmHcdxWkGvngVdgzyVeNIyi9BVvb5CpKk3qWk5JG1FWJv9v0Z9M7MXgUWSdom7jkgcWwQ8T+givo9wL06I/5dzZ6mupO2AraKNjrgv9UORmT1GyM38q3plq/AES2UI/y+xv/xzvBVYMq4uqdRNPtLMZpjZDwhSXKO76YfjOE7uFL0F3K0AnKcSTwPnXEAYP72VENieBV5NUbU0sWk68Dvg47ELuzu+fQK4IE7CeqPs2F0E2b634usRVA7A5wKrx67vL7N0DBjgYmBGcqJUPczsl2b2eNryZZwGnK+wZCnZuv0LcIikaZJ2JQTf3eLEsdmE1j3ACXHC2gzgFUJXvuM4TiEo+ixoFb2JnkTSKmb2RmwBXwDMNLNzWu2Xk46t1npnpi9bUXJB50HWvMF5zNrsqq+BWt9GxlzQefz65JELOo/72VZ9CKhpPvSlXNBjnrwus/b42HX2SH1Tpz53V9O1zntbJqzPSToCGEhoOV7YYn+cBnh98YL6hWrwv/4LM/vQ2bXcPLGGacsYPPMgl+vIQdChCAxoy/4z9sbb2b9bA/stl5uoQbIH4DyCZ7/3fiKzjbknfCuzjTGZLUBnDg+ZPUmvCsBmdhYh4bXjOI7j1KRVY7tp6VUB2HEcx3HS0qqx3bR4AHYcx3H6JK3KcJWWHhkEUt8QcUit0K0mixfIxRgcx3HqUvRZ0D0SgPuIiEMjtEK8wMUYHMdxalD0XNBNnwap3iniULJ5gKT74vrYmyW9Q42JF5yhIK6w3PkkfSJe64OSfhNbso+VEnPE94/HYAsuxuA4jlOTTutKvbWCpo4Bq3eJOFTiTuC6mPbxs8BXzexrSi9eUO18WwNfA3Y1s5clrWZmr0i6G9gv1v8ocLWZdYZl0L1DjMFxHKdV+CSsZVki4gAQW6K7s3wGpZJQwu6E1JEloYTycdm5paAd7Z1R4ZxLRBximSsIOapL3BC7xV+QVBJxeLGK/xsAV0tam7AW+ZEq5cYTHg5K70viBdXO927gKjN7GaD0PyGoHk8IeJ8APlZ2nobEGOL1l8QYKgbgBq+nJMbwe8LnWp4dbBk1pFUHr8sqA1dr4LSO4zjdp+iTsJodgHuliEOC84Dvm9mNksYTWu7VzrmceEEMYJXOJyqswjezSZLOVZhMttjMHi4rUngxBjObCEwE2GC1bYr91+A4Tp+i6C3gZo8B90oRhzK/nol2jkrsTyVeUINbgcMUVJoo/R+5nJDDerkUNy7G4DiOUx2zrtRbK2hqAO5lIg5D4ySl0nY8Qbzgz4QJT88nyqYVL6jm4wzgR8CdsYs4me3rd4TAf1WVui7G4DiOU4GiT8LqVWIM3UW9WMRB0mHAe80se4LWFpO1C3qTwWtl9uHuF+ZktpFHLuh+be31C9VgcWdHZh/yyAWdNSd1Hr8+QwYMql+oDkXIBZ1HEHj5oo/XL1SHPHJB/2mb7LmgD33ud5nFEUastnXqr9j8lx9yMYYeoleKOEj6JWEC1H6t9sVxHKe3UfQG5grRAnaKwag1d8z0ZXvwtF0y+7D2STdmtrE4ByWi/hlbwFlb0ABvLs6+aizr70dRZqnmIWk4dMDgTPVfWvhaZh8mr71DZhtz3x5Sv1AdPjzzu5lt9F9jk8wt0nWGb5n6C/bcK7O9Bew4juM4eVD0WdAegB3HcZw+SdF7eD0AO47jOH2SVs1uTkvTc0H3JdQ81aeF0eYcSZeU8kM7juM41XExhj5ME1WfSik3twE2ZtmkGY7jOE4FzCz11go8APcQ6gHVJzPrICQxWS+eo5+kn0aFohmSjon7/yhp34QvlysoOVUr35BiUny9SmyNT44JOz6U391zHMfJTheWemsF3pXZAyh/1aeS3UHATsDn464JhJSd4yQNJCgd3UzIEX0ocLOklYC9gE/VKA8NKCZFTgX+bmZHS1oVuE/SLWa2zNqWpBjDmqtswLCV1qh3+xzHcXKh6JOwvAXcMyxRfTKz1wmqRbtXKFdSfZpBSONYUn0qpyS7+BIwz8xmxf37Ap+Ix+4jSByOAv4K7BMD/AeAf5jZWzXKQ1RMMrNOoKSYVIt9gW9GW7cTxBw2KC9kZhPNbKyZjfXg6zhOMyl6KkpvAfcMeas+zTWzMZLWJeSLfr+Z3RjP83kzu205B4KW8D6ElnBJyKFieQVlp0YVkwQcaGaPprxWx3GcplKURC/V8BZwz9Ajqk9m9izw9bgB3AR8vjQrWtJoLdUdvpLQ7bwLQYiiXvlqPEFlxaSbCFrFRFvb17HjOI7TVIo+CctbwD2AmU2WVFJ9gqj6BCBpqqSZhG7inwLXR9WnB0in+vQH4DRJuxCEJTYApgedCV4gBHuAvwOXAteY2eK4r1b5apwGXCjpP8DkxP7TgbPjtbQB81LYchzHaRpFz4TluaCdpuG5oJfiuaADReki9FzQS+lLuaAHDByR+gv29lvzPRe04ziO4+RB4RuYjfSR++ZbT27ABLdRHB+KYqMIPhTFRhF8KJKN3r75JCynSExwG4XyoSg2iuBDUWwUwYci2ejVeAB2HMdxnBbgAdhxHMdxWoAHYKdITHQbhfKhKDaK4ENRbBTBhyLZ6NX4MiTHcRzHaQHeAnYcx3GcFuAB2HEcx3FagAdgxykYCqzcahutIuZQV3w9UtL7S/nLV0Q/spLHdeRkY4CkTRup09fxAOw4OSBpZ0mD4+vDJf1I0voN1L9M0tBoYxbwuKSvNOhDHjYyXUesd5ykofH1BZImS3pPAybuAgZJWgeYBHwO+HWTfcjFj+4i6c+S/lRta9BcHteRyYakDwAzgVvi+zGS/tygD30OD8BOr0fS7pI+EV+vKWnjbtj4UQxe/SXdJulFSUc2YGIisFDStsA3gOeByxuov42ZvQYcSNCGHgEc3UD9vGxkvQ4IGY5ek7QvQeHrc8CPGqjfZmYLCOpb55rZh4Btm+xDLn5I2q3UEyHpSEk/lbRhiqrnAufV2Bohj/uZ1cZ3gHcCrwCY2XRghW8NewB2WoqkD0v6t6RXJb0m6XVJqbPSS/o28DWWSjT2p/GAAbBvDF4fBOYDmwEnNlC/w8KSggOAn5vZT1hWerIeA2KX3gHAtWb2NtCoSngeNrJeB7BEguZ9wG/M7H4a+61pk7QT8FHghrivUfWJrD7k5ccvgQWStgNOAp4ELqtXycxuq7U16EMe15HVxmIze6Vs3wq/BKfXjWc4fY4fAR8yszndrH8QsD1BzhEze1ZSd+RcSnI47weuMLOX45BXWt6UdCLwMWAvSW0Jm2m4CHgKeAiYJGkD4I1GHMjJRuk6jgT27sZ1ADwo6UbCQ8w3FTSxG/mx/QpB7vKvZvaQpE0IXaDN9CEvPzrMzCSVHmgulnRUvUqSptXy18wakT3K4zqy2pgj6RBCIN8Y+CJwb4M+9Dl8HbDTUiTdbWa7Zag/2czGSXrAzHaI3X33mFmjXYVnErpuFwLjgOHADWb2zpT11yUErSlmdnsMfu8xs980dEFL7QnoH1ux3SIGz36N2MjjOiS1AzsC8+KDzBrA+mY2rcFL6DZF8CH6MYmgzf0JYE/gv8B0M9umTr2RtY6b2aPd8GWgmb3VaL08bMS/y1OBfQEBNwGnx27tFRYPwE5LkfRzYG3gWmDJH7aZpZpoIukEYBSwD/AD4JPA783snG74sirwmpl1xh+MIWb2nwbqjwBGxcC1EtBuZm/WqXN8reNm9osGzr8mcAawnpl9UNKWwDgzuyStjbyQdBgw0sy+FydxvSN2A9eq82dqt/o+3NM+5O2HpLUJ3bZTzOyu+ECzt5nV7YbOC0njgIuBYWa2QewOP8bMvtBMG87yeAB2WoqkSi0rM7NPNmBjHxJP1mZ2Szf8GEzoZtvAzCZIGgWMNrMb6lQt1f8kcBzhB2qkpM2A881sfJ16NZXLzexb6a4AJP0V+B3wNTPbTlJ/4IF6ra1Y939UDjoKbthqDfhxLqHbek8z20LSaoTPZac69WrOUm5k7LO7PuTtR1biuOs5wBbAQMLn8ZaZDW3Axr3AoYR5AdvHfQ+Z2dbNsiHpFip8v8xs37Q+9EV8DNhpKWb2ie7Wjd2MN8Ug13DQLeM3wP3ArvH9fOAalk44UfqkEwAAIABJREFUqcfxhK7r+wDM7BFJa9Wr1EiATcE7zOz3cQwXM1ssqTNl3TVy9GPXOBwwLfrxsqQB9SrlHNi65UNefkh6ndoPNGkD6PmEIYErCd+vo4GGloURZjA/WTanIe33Ii8bpyRer0SYTZ2pO7wv4AHYaSmxpfhLYC0z2zouf9nfzM6oVzd2FS+QNMzMXs3oykgzO1TS4dH2QjU2C2uRmb1dqhIfDuoi6ae1jptZI+t434wtPYu2dwJeT1m3XtKO1DPTgcVx/Lnkx+qkmI2d88SjbvmQlx9m1p2JgJVoM7O5kvqZ2WLgQkn/IoynpuXp2IVs8Xv5BeCRBv3IZMPM7ivbNSmOj6/QeAB2Ws2FhOU+FwCY2QxJvyeMZaZhETAzdnEtGW81s5pjqxV4W9Iglv5gj6SxJ/S7JZ0ErCTpXcCxpGs9z2rQz1qcCFwPbBJ/3NYDPpKy7izCtVd66DBggwb8OA/4I7CmpNOBQwjrQOtxcAPn6CkfcvEjPghVxcxeTmnqzdhyf1DS94HngFUadOdzwC8In+HzwK3AZ5tpQzEpSqSNMEFunQZ96HP4GLDTUiRNMbOdJE1LjC1NN7MxKetXXNJhZpc26Mc+hG6yLQlJLHYDjjazO1LWbwcmsOwsz19ZE//AFNYAtxHGCwXMBrrMrKNZPiR82QoYH/241cweWpF8kPQ4NR5ozGyTlHY2AZ4ldNt+FRgKnGdmqVufknY2s3vr7etJG5KeZun96AAeJ8yCXqFbwR6AnZYi6W+EyUvXxDG7g4FPmdn7WuDL6sDOhB+Je83sxQbqHmdm59bbV6P+GoQf2K0IP7ZAY5NUFJdi1duXws4wYGSZH/9qoP4lZnZ0vX016ucx8SiTD3n50V3i92F1M5tbtn8L4AUze6kBW5W+F/eb2Y7NtOEsj3dBO63mWEL6w80lPUN4Mk6dAjLR0liGtC2MhJ3Sj8tz8f8NYiB6MmUL8pOE9IFJPlVhXzUuB/5MSCxyLHAUkGoJlKR3ELrzBknahqWtrqHA4JTnL9n6FGE2+HqE3L07ERIm7N2AmWXWYMex2LqzjxPkMfEoqw95+VFa3jaKZR9o7qxT7ReE4Zm5Zfs3Ar5Jir+ROGa7C6EbPjkkM5SUyVXysFFmayMSccfMft+Ijb6GB2CnpZjZY8B4hXW3bWaWdtJQibGJ1ysRxjxTL5lJcD6wAzCDEMC2jq9Xl/RZM7u5UiVJhwKHARtr2ST5Q4h5b1OyppldIOlYM7tN0j+A21PW/QDhAWBEvI4SrwONzrL+EuGe3mNme8Ru3FPq1AFA0teAk4EhkkpjnCI8IF3cgA/dnniUow+Z/Ej4cwwh69MIYDqhh+Ue4N11qm5nZst9/mb2N0lnpTz9yoTZ7f2ANRP7Xyf93IA8bCDpEsLwznSWzp42YIUOwJiZb761bCP8MZ5JHA6J+x7IaPOf3ahzJbBV4v2WhKVJmxAyF1WrtzFhnHEK8J7ENo6QySrt+e+N/98MvBfYBni0wWs4JIfPY0r8fzowIL6elrKuCD/UZxHyBLcTkpE06sOdwABCr8D3CTNuZzTTh6x+JGzMJDwYTo/vNweuSlFvbneOVSm/SQ7fi0w2gIcJDzSZ/Ohrm7eAnVYzizBx6GZJh1qYHZp6+U+i65hoZyyNiwcAbG5mS2Ykm9lsSdub2WO1ViOZ2eOEbvNbu3HOJN+PXd4nEGbwDqUxMQiAUZK+UcHH7zdg4zlJwwmzqW+Krcjn01S08EvboZBJakkKz9L9s/TjyEcTPsvjCOPim5JyZnKOPmTyI8EiM1skqZTG8WFJo1PUe1TSe83spuROBXWnxxv04QJJWZNgZLUxi9CSfqGBc/Z5PAA7rabDzE5SSNR+l6SP01jS/J8kbQFPEJacNMpcSb8ktIQhZP15RNJAYHG9ylo28UI/Qssr9YQdM7suvpwB7NGI4wmSY9UrEbqmG1rmZGb7x5ffUsgINQz4a4N+JLu9VyIsOZkG7FWrUoWJR4uiH1sAqScdZfGhB/yYHx9orgVuUcg49myKel8Bro/LyUrpM8cS8kl/qEEf8kiCkdXGMIIgw70sm3K2ofSifQ2fBe20lLLlR1sBVxDSQQ5vsh+DgM8DuxNa4P8kjKcuAgabWWpVoTjh58OEcbyaY7D/3965h8lSVWf/9x7AS7gcLqKiKFGUgCAod0RFRBIjESGgB9RgvBARvEJEiUajAka8BkU0giCEq4KoSVRQEBGV+10Q0C9+QPADUREFkQPv98eqPlPTp6e7qqumu+lZv+eZ50xX9d61ZqZPrdprr7VeSR8G/sf257uOvwN4jO331PpBZs/xKKJ14IsrvHeL4nrdK66/AW5zAxEDSX8OHG77lQPedzLwBXftfUr6a+BVtuvoMw9lw3zaIWkHwhF9yxUEMoq/398R+QgQD1Mn2r5vmOt3zX2+7YEPI23NoTnae3qEbT0nkXTAyViRtIVLDfKLgv3dXLFZfbFC3YPlsyurNl2YNyT92Pa2A97zE2AT2w91HV8BuMo1+vX2mHsxcKntp1d477lEc/2fdx3fADjadt/+yBXmv9oDFKokXWd74znO1epdPKwNbdlRlDA9xvY3u47vSjzQDBSFaAv1boJxtO0NRjxHbbGSaSdD0MlYkPRC2+cC60lar+t0HQ3brwF3E2G6oXvLKsQXPkwkX5XLRao2TNi19LKzF11lL/uhbudbXPdB9dt87m1DuYXiCkRpUtX937W7nW9hx40KlaU6dnyyZMciQq+5Sii83/2obsnLsDa0ZcdHiT3kbn5ClN31zYJWi+IYzO5y1mmCsW+N8Y3nUEmshKgxfzIRYeorVjLtpANOxsUOwLn03s8yUEmOEFi3Soi1AscB7wc+CexI6LfWcYDlkozOXvTLKoz7o6T13aXvqmiF+cca14fZCUJLgV+6unbro/ucq1VLDJQ7Ti0FvupqHY/aTDwa1oa27FjL9v90H7R9s6LhyyBaE8ewXbt2eR7mGEqsZNrJEHQyViQ9pcgk7nusz/h/Bz5t+5qGdlxmewtJ17iQ75N0ge1hE6KqXncX4BPAh5idbPMe4B9dUQ6xNJ+Ies1yOH5g0k/xe7zd9vu7jr+P2JN/Qx07hkHShkT2dc/EI9s3zLcNbdkh6WbbT6t7rs98azI7MlMlkas8vnETjCZzdLZjOjkfxRbLla4glTnNpANOxooatrgr9lCfRqxM7mcmRDdwr69rnguJ7OOvECvz24B/tV2lZKSTOfs6lr9B/UOFsZsBBzOTbHMt8FHbV9b4EZC0PyE4cBczyj+2/YwKY1cFvghsRmQLAzyLqGN9rWs0SJG0LRFNWI/4XXT+JgP3C9tKPGpiQxt2SPoc8Xd4r0s3WYUwxDpVPhfF+3chojLrFvM9EbjR9oZVxhdzHE+PJhi29x/VHJI+TpSzvZZIdjwAuMn2IVVtmEbSASdjoVhlbAwcwex619WAd86VBNNjnu79YwBs/6KmPVsB1wOrE6vRxcARrt5s/kKiZeNllHRSbZ9WcfxGtq+vY3OPOW4GtrN9Z4M5NiD+LgDXuUbT/9Ic1xMPFN2/i0r1xJIOt/1Pg47Npw1NUXR2O4YIu3YepDYDLiWS3SrlOUi6EtgZOLtYOe4M7GG7jhLRDcAzeuUajGoO9RYr+XwTm6aB3ANOxsVfAH9DOLzyPvA91EjucIiEP5fIrjyuSBiqK9eG7UuKb3+v6Ie8iu06Grgr2z6o7nVLHKdodPBF4NQ6K84StwJVZe56UuzNbUF0PvqqpCcBj62Ztfs7299oYMaLgW5nu0uPY/NiQxsJUEV2794KNaPyA81yiW4DWGr7TkmLJMn2OZIOqzlHG00wms7xEuAY20c3sGHqSAecjAXbXwO+Jmk72z8adh5J7yf25/6CSKRaiWgduH3NeU4m9E0fJFZNiyV9wnbVvrvflPSXnqNn9CCK/bFnECG6K4sV9XHu0Q+4DzcD50r6T2Y3Oziy6gSSPkP8Dp8PHEZoLH+OekIG5yrqm8/ssuPqAdd+I/E32EDS5aVTqzKzFzuvNhS0lgBFbI1sDzzF9jckPRl4vO2LK46/u1hN/wA4QdIdzGwvVKWNJhhN53gF8Jmi3O1UQh7ywQFjpp4MQSdjQdLBto+Q9Gl6qxm9tcewXvNcSZSYXO6Zhh6V6j2757H9LEmvImoc3wVcVnWeYtW0GLgX+BPDlYt0mni8jFBRupfownVI8cAyaOyHeh33gGYgXXNc7pCFLDdIucr2ZjXmuKC3GX7+gHFrAGsR5WDvLp26x3atldewNnTNcbybSxoeTTjMF9reqPgZz7Zd6YGm2Ju/lyil2of4jJ3gelKZjZtgtDTHI4lIxhJClOKbdULp00iugJNx0dnvvLThPH+y7SJ829l7G4aVJK0E7AZ8xvYD6tH7tg+NVk2l1e+uwPeA3W1fXISAf0DUO/eljqPtwwPFQ0Dn97kWNVdcw2aO2/4N8Bvg5V3Z3CtKekKdzN+Wste7JQ1XoL6k4TadB5rCrt9IekSN8YcUe98PUqg5STqcGuH4Ok5ynue4X9LXgPuIOvVXEBGPBUs64GRcnCNpbdtfKh9UaNvW2Xs9XdLngdUl7UtkIn9hCHs+T9TuXgV8v0juGmiHpKfbvomZfb5uqoQ8IWw+Bni/7Xs7B23fUoTZ+9nwcdsHKQQIekUT6oQajwLOIPRfP0DcJD9QZaCkvW2fotm6sWU7KoXCJb2JSISblc1NZOHOuw1qV9LwgcJxdx5o1qbeA83Q++EqWkX22NOuHJ1pY45inhcRsp0vAi4ETgAGtgWddtIBJ+PiSOBbLN9wY2eiH/ObKs6zNlE69DtiH/h9DNFdp7gxl2/Ov5C0Y4Wh7wZeTziu5aYl9lKrXH/OPWvbxw8Y3sm0/kyVaw2w4wRJlxG/QwEvt33tgGEd1ij+rdU5qwcHARsNmc3dhg1HECIfs0LhQ+5ZHgl8FXhskTy1JxX0lQfsh1eNGnU+v02iM23MAfGznAq8pWop10Ig94CTsSDpJ56jPlV9evH2eG+vOuJh9oDfRiRx3UOsRJ8NvHvYpKq6KDpfHcbyrTAr99ptyY6PE3q1VZOE5sOG7wE7TUKSjqTHE20Ty7XddSQNOyV3OxEPNN+tUm7Wxn64ZvdvXo4qWf5tzFGaq9wL+pHAis5e0EkyFvq1eVw0cHCEKfcHniqpHOZdlQhx1eV1tv9N0l8Rq6fXEg65rwPW7B7Qy+EZmcFBHA8cCnwM+Ovi+pVClV0rpF42bN7vfBc/AQ5VqAedQTjjSg1BJH1igB0HDhjfCRsPnc3d1IauuQ4jmnHcQKn5BFFSU3WObYnyo6OK16tK2sb2RQPsLO+Hb0JEhQAuoHop0G+B20u2l//PmXiwGMUcvXpBr0f2gk4HnIyNOyRt3b3SUjTEqBJ6PBn4Jr1XCMPUwnZuLC8hyn+uKhKBBnEW0WihE6btvkFVdcB/Zvvbkj7m6Av93jkyeXvxCCJb+mRCu3doUQrbxwLHFnuVewKfkvR4V+u89Baic9aXia5HtcQkmAkb3158VdJSbtmGMnsCG9iu25O7zNFA+QHoDz2OzYmkA4iuUWcVh06XdJTtz1a89nOJlpqnDFnu18Yc0LsX9GOHnGtqSAecjIt3EjeT45ndb3cfIlmjL7bvJlSQ9m7JnssknQ08BTikKP+osgJdUnxtSOz1neqKfay7uL9w+D+TtB/RCrPSDcr2JsUqaW/gJCKR7GSi1nLYTkNPItpqPpFYkVbhiUTS1isIR3MacGbVMGVLWdyNbOji/1AhGjMAubTPZ/shSXXuu28EtnbROavIgP4hsXrsi+0Dioz2nYB9JX2WeGj9vCt2imtjjoI/2v5T55m2SExr8nA0FeQecDI2iifgA5jdb/czdWs+W7JlEdH7+Oe2f1uU3zzR1Ro3dOo1dyec8arAe2xXXcEiaRsi/LsGsRe8GPiI7drhdElLiKSwj7h6I5HO2E6i0C2E8zpjmIhCkUW+F7HyOdj2STXG9lLCuptIPvqCK4jZN7WhGP9lohTpO8wOhdcJY59JlJV1OkDtD+xoe7eK468BtnShalXsnV7qmiIGxV7uXoQ85Xtsf77O+KZzKHtB9yRXwMk4uQtY3/Ye4zaEmTKXvyEEDVamlAxVgT8QN5g7iMb5tdphlvYE7yH2HWtRJAstIZzn74kIwxl15yFCv893g57JkjYlVuMvJpzXVTWnuBV4PHBK8XoJ0WJzU6Jc6zUjsAEiS/9bQ4wrsx+RCf1e4jP2XaIncl8krWh7KXAi8GNJnb/l7sCX5h45a45HE21elxCRgbOArepEaNqYo+Bg4ue+AXgbRS/omnNMHbkCTsaKpG8TEm+VVjXzaMdQHYskPY+40T+HWOmc6ooCDqU5XkXclDrKS9cDR7q61Nt3iZ7aXy6+Zu2hV8x23dv2KcX325Z/BklvcoUevpL+mWgk8jOi5OS/h/m7dmpPS68FnG/7+f2y59u0YdyUs/uLvIjnESHb73umb/mgOe4hfg+nEI5v1s2+SoJgG3P0mXtgMtq0kw44GSuKJhqbE8lKy0oSbPfNZp0HO4ZqwSjpIaLZxvmEA+++QQ3K/H01sTo4CLicuMluTtSifrRK2FTSraXr9mqWMDBTteuGP6u0q1ep1xxzPETsF3f+jt2/i6qJRzcAL7J9a/H6icR+9kblv8982aDoWjXnjbHiHI1arQ76Oasg6T96XXvGBO8z33MUWzt7EKvnb9u+XlKnucgadUPp00aGoJNx87/F1yJi73RcDNuxqLJy0xwcQLSd/Fnp2NkKacGTiaSqvthet6ENMDshpjs5pmqyzNNbsAPigeRHhSMWsAHwZkWb0UG/jzZs2LOFOZq2Wl1b0pwPb1UeUG2/eshrLzeHpFnJZDU4BngqcAlwtKSbgBcQLTa/0tS+hzvpgJOxYvsDsCyJya6okzoPDNWxqCjbQcPr+S7ucr6deX8uaXHdySTtRUgJHl40Pnicq0kJeo7ve73uPUHxc2gOPV8q9i+2/XVJ5xB78iLqaDvdkz5WxYYmtDRHRwrxattXDDHFCkQeQeNMYUXv6d2IrPZyQ5HDa0zzM0mnESV6dTSitwE2tf1gsZ/8K+Bptm+vMcfUkiHoZKwU5TMnAp2esr8C9rF93Rhsqd2xqDT2x4SjOo6ol6yk5yvpMttb1D03x/uXSQkW4do1ibDfQAEBSfcSe3wi9qJv6JwiamEri1z0CllXDOfvYPt8zdHcpOKeZadncad387JTVO9/3FgPuDTXecA6xN78qVU/11XD/hXn+i/gj0S537LuYrY/UmOOxUTv5tcSal9fBE4f9MA87HbGQiEdcDJWJP2QKGk4r3j9AuBw288Z0fX73kzrlOBI2ogQg/hbohvX8bbPHTCm4/iWO8WQjq/uPnbxvvX7na+yKlSpfzHw09KpVQlpx7713ZIOtf1eSSf2NqHSnuUK/c67QnvLNubomu/xRF3yEqK5yGm2Dx0wpvEecGmua21vMvidled7AbEVsBpwOnDoXFnRXZ/v8sNd52FmQTvjdMDJWOnlIKo6jZau/xBR9rK0c6h02rafWnO+Wnq+bTi+0lwXAdsRdaKbK2qZv9PWjbzC9VvT823BlsZavqVxazK7P3dlWcSueZ5J7G8vsd1XklDSmnUe/gbMdQzwCds/aTDHIqKk67XEA9ZJxdfzgA/Y/os5xrX2+Z5Gcg84GTc/L0pHOqueVxMdiEbFp4mkkAuJUosfDJNsoiH1fFu+ATWREmwcdnVDPV9J/eTp7KJMqiKNtXwl7QJ8kqjrvovI5L2R6HpWdY6NmKnPvosojTpo0Lg2nG8pm3sl4MoiAep+hlt93kR8jj9t+/ul46dKmlPxa6E72EHkCjgZK8Wq6QNEv1kB3wf+pbiZj8oGEU54b6Jf7dnA0XOF1eaY40Ii4/M0l/R8i3N/7zkkBdvcbyzm25gZKcHvuKKUYJthV82h5+s+9bvFuLlqjV8CrGu7r43FHMu0fJnRc16m5Wv7nYN/gmVzXUnIY55t+9mSdgb2sF1ZRL7IDTgF+PKwK+dhaTm6stjR/rWuDa1+vqcO2/mVX/llQzSz2I9oZLHviK65Qr+vmnN9nOgb3IZdawJP6HzVHHszsHYLNuxFCF2cATy74hgRq+6PDvt7LM11afHvVcwsVi6u+bc9aRSfowF2HF/l2IA5jgVWL71eg2gLWuV30Mrnexq/MgSdjAVJn7L9dknfoHejgr4yfy3asTKxZ7uECJmeCWxu+5aa8wyl5+uulWX3fiNRI12VoaUES9dvHHYl9tSHCqEWe437EK00rwBe6Rp7l467/lLgnSpp+aoQAXA9Ld+7i8/HD4ATJN1BRYnI4loPSlpL0iM83m5c3eH4RdQMxxP/J37beWH7N5IGZui3/PmeOtIBJ+Ois+fbt65zBNxB7G+dQqzcDGylaP+H7V7CAL04niH1fKEdx+dmUoIdDgO2pyvsWvFnaKTnW2RRv4PQvH2p7Z/XsLt7rsZavkTt7B+BtxMPBYuJXuF1+AVwoaSRd3orh+MldR6IloXja063qByGLraOVqphSxsPdlNHOuBkLLhoDmH7/DGb8mXihrQhy98MTKyIq9BEzxcaOL4eDCMl2GGp7TslLZIk2+cUzqwKTfV8jyYELbYEvqIZOeZhkoba0PI9xNFQ5EEKh6UaDUUKxtnp7QhiW2JWVnr3qrQinyK6k51G/L/Yq5i/Km1+vqeGdMDJWJG0PfAvwHrE57Fzs61V/jMsHqIsZQ6G1vMtaOL4gGWrvrKU4Daun007dNjVzfV822plCe1o+XZ6FpfZpcexOfFMp7eVbf9h0PtbptNn+URg487BUji+ktRm8d7jJF0O7Ej8H11i+5oatjT+fE8j6YCTcXMsEXac1aVnVKhPv12oFSp8B9E68K3M6Pm+roYpjfYbCxpLCdJC2FVD6vm63ZKVe4ArJNXW8i03FCmcTodVqdnbWdJ2xGd8FeDJkjYD3mh7/zrzDMlRxb+PJAQ+riWc58ZEb+btas53NfEZWxGgSmlZiTY+31NHliElY0XSRba3GeP139/vfGcFMwI7ViUad3SSkBYDJ9j+VYWxjaUES+/v2ce5+9iAOY5keT3f2wgn9CjbPfV82yxZkfT6XseLffJBY1trKFI0R9kT+LpnupO12pmqgg2nAB/pJOQVDwFvs135AVHS/oRO9l3Eg3Lnb9K3tKw0fujP9zSTDjgZK5L+lShJOJPZK5XL5xw0Yaihnm8xx9COTy1ICfZ7v2p2JtOQer5t1iK3haJX+XOLlxe4Zo/yzgOmhmgP2haSrrT9rEHHBsxxM7Cd7TsHvrn3+MYPdtNIhqCTcdNZ/W5ZOmbghaO4uJrrts6p51vsdQ2UEyxost/YWEqwzbAr8DhJ67rQ8yVqiTsJWvfPMaaVkhW1oOVbmusAQi7yrOLQ6ZKOsv3ZqnMAt0h6DmCFKtFbmZEqHBU3Svoc0NH2fTWRgVyHoUvLChrvp08j6YCTsWJ7xzGb0FS3tZGeb0uOr7GUINFU/7u008e5iZ5v05KVNrR8O7yRaGzy+8Kuw4EfAnUc8H7AvxE/w23At4nPzCh5DfBm4F3F6+8DA/fCu2hSWtbWg93UkSHoZKxIehxwONFt6a8VPZW3q7JXNwkMCKleb3ujAeMb7zeqRSnBYr5GYddijkfTW8+3ytjGLSDbQNI1wJa27y9eP5LojvXM/iOnD0kf6nV8UOZ7m/vp00iugJNxczyhofue4vWNRAnNSB2wonnFu1i+k9WgUHg/x3Jvn3Od+csCBrMcH9EkpAqtOYQmYVfNref7BEm4gp5vwdAlK20kckla0fZSonznx5LOKE7tDnypoh37At+zfVOxB34sUff6C+DvR5HjIOkU23vPFZavE47vOFpJj+w8kFQc18bne2pJB5yMm8fYPl3SIQC2l0oaebINERo9jdiX2o8I21VJONmoK7TWoRN6rUQTx9dy+U6TsOvOwPnAy3ucM1DVATcpWXlMxff142Ki9eIRks4jJPcE7Gf7kopzvI14uIQQ+dgMeCrwbCIk/bwW7BxER3iicVhe0tbEQ8RiZsqp3mD7LRXHt7GfPnVkCDoZK5K+R6wMznFo2G5LlEzs0H9k63ZcZnsLSVfb3rQ4dv4gO9SS4oykq4HnlBzfKsAPO7YMGNtm+c7Yw65tlqx0J3JVqVstZywPSznLWNLJwEW2/614XSszvSmS9iG2EoaW+VSoOi0BzhqmnKrJ53uayRVwMm4OJFZG6ysk/Tp9jEfNA8W/txdJQP9LJAH1pcXVp0o2dOyplMFMC6u+lsKuben5Nm4B2TCRa231adDias1ZHpK0DhF+3YloztLh0RXGt8mGwBskPYFY3V9AOORKUpUFi2z/Qpr1kawTqWry+Z5a0gEnY0EhdnCL7csl7UCEPvcgtHhv7Tt4fjhU0mKinOjTRB/jdwwa1HT12Ybja6N8h3bCrnOFVV9COMKqDriNkpUmvYdXIJqGNHEQ7yOyfFcgmnBcB7FPDgwtMjEMnVrbIjFuX+AQ4DOFbVW5pQhDW1Gv/RYqlDK18fmeZjIEnYyFYt/0RbZ/Len5wKnEf+pnARvZHscquDZq2DxCs5tobMWM4/t+DcfXmavnqs8V1JDaCLv2mHMvIvP1Z8Chtq8Y8P5lJSvAT0unViXC4HvXuPaltreUdBXwLNuWdLHtrSuMbSVEXNT9bmP7gtKxlYn77u+bzl/DjncTyU9rENrGPyBWwJUlNyU9FjgSeFFx6DvAAbbvGjCutc/3NJIr4GRcrOAZoYAlwL/bPgM4oyhDGQmKtolzMqgRRwurz2WrrOKG1OSm1GTV10bYFTXT822zFrlJIlcroVHbf5J0BKWeyx69IAPAK4n+3l8jkuQusv1A/yHL8VTbe5UPFPkafR0w7X6+p450wMm4WKEUntoJ+IfSuVF+LvcjmtQBZ67XAAAOIElEQVSfTjjLoW6+DfYcW3F8BU0UZxqHXdVQz7flkpUmohI71bxWP86WtAdwpscUbrS9qaTVidXnSwnN6Nttv6DGNJ8lOryVOQrYYsC4Nj/fU0c64GRcnAKcL+lXRC3tBQCSnkYo54yKdYiymSXAUqIU6YzCGdRh2NVnG/uNHZqs+m63/cGG129Fz7elkpWhE7lcX8KxHwcCKwMPSrqPmd9FXa3koZG0IeF8dwC2Jv5GP6w4dmtiBb+2pHI0aDVgpQpTtPn5njpyDzgZG0UIax3Caf2hOLYBsMooGhX0sOeJRM3mgcC7bJ9YY+xQe45tlqQ0Kd9pqfRm7CVZpTkai0pMC5K+TbSfvIAIP1dupCFpR6Iv+xuAY0qn7gG+ZvunPQfOjB9pydXDjVwBJ2PDJdm80rG6TeJbQdLmhPPdGfgmoU9ch2FXn22uDJqU7zQOu05CSZYmrPewIgzwKuAptj8k6UnAOrYvHpUNtv+qwdjzgPMkHVd3S6EgV759yBVwsqCR9AFib/B6IhP7W8W+dN15hlp9SlqzrZDnuFd9bZVkSTqYeBgql6ycYvtjFWyYqN7Dko4mHsReaHujwr6zbW81gmu3qQz1GKJEb2NmNzb5ywHjWvt8TyPpgJMFjaSHiLrMTk/nzn+IjtOoFPbUGPVO2yzfaWjHxJRkFXM0FpVoSudn0hj0gEtbAvsRe7GdLZVXEQ8kH6gx17eArxJJdgcQrVp/afvg9ixeeKQDThY0ktbrd972LyrOM7bV56St+jp0l2R5QBvINmuReyRyvQwYee9hSRcBzwEuKRzx2hSJeiO04ULb2w86NmCOWa1ai9D6eTUzqZMucg84WdB0HKykdwCn276tzvhJ2HNsuXynMRNSktWGlm8bHEmsHB9blITtCbx3xDasImnbTs6FpG2IzOQ6dPbkfynpr4iSvSe1aOOCJB1wkgSrETWbvyb2gr9i+/9VGNdm84hGtFS+0waTUJI1Eb2HbZ8k6TIiyU3AbravH7EZbwCOk9SJRtwHvK7mHIcrWrX+I1H/u1rxfdKADEEnSQlJmxI1wXsAt9p+0YAh5bFj3XNso3ynJTvGVpLVRiJX2xRbBE+itOAZU5ndWsW1B3Wvqjrfm21/po25Fiq5Ak6S2dwB/JIInT626qAJWX1OxKqP8ZZktSEq0RqSPgT8PdEPu7PaMVFbOyobHkF0BvtzYMVOgxTbhzec+mBC1CEZklwBJwkg6U3Eyndt4CvAaa7ew3isq89JW/WNsySrzUSuNpD0U+CZtv80Rhv+i2jLeRklCUHbH2k47y22cx+4AbkCTpLgycDbbQ8rBDHO1edErfoYsiFIS/Wik9Z7+FpgdcaQDFdiPdubzMO8uXprSDrgZMGjUPB5qe1Dhhg7CXqnk6Y404ae77BMWu/hDwNXSLoWWNYC0vauI7Thx5KeUSei02FAc5VVG1u2wMkQdJIAkk4iVm7/t+a4seudSroVmHNlN6pV3yQ0BJm03sOSrgM+D1xDaR/c9vkjtOEa4m9yM/EQUFkco2lzlaQ/uQJOkmAd4DpJFwPLNFsrrFQmYfU5Kau+SSjJGvfvoJtf2e6rOT0Cdht2YNnBFs031ma23xikd530IVfASQJI2qHX8UErlUlYfU7aqg/GV5I1ab2HJX2CWHV+ndkh6HGUIdXqTNY1dn/gg0R1QGclb9vPaNXIBUaugJOEcLRFW8qn2/6OpD8jVpaDmITV50St+sZZkjVJzregk5G9benYqMuQujuTPQG4icGdycocCGxk+872LVy45Ao4SQBJ+wL/AKxpe31JTwc+Z7uvTN8krD4ncNU3EQ1BkkDSlYTM5qzOZLb3qzHH94Cdcs+3XXIFnCTBAcDWwEUAtm+SVKURx9hXn5PkfAsmpSHI2CnaN74feH5x6Hzgg7bvHqEZS23fKWmRJNk+p+hLPRBJby2+vRk4V9J/MjuUPu797Yc16YCTJLjf9p86XYIkrUi1OsfGQvbTwoSUZE0aXyRqgV9RvP474Djgb0dow7CdySCSrgBuL75Wmwf7FiwZgk4SQNIRwG+Jzk1vAfYHfmL7PWM17GHEJJRkTRqSrrT9rEHH5tmGXp3JTsz93PGTDjhJWNaM4/XAXxJO49vAMc7/IJWZtDaQk4CkHwHvtP2D4vX2wMdsbzcme1a3/dshxp3Z4/DdhOTmF8bZavPhTDrgJCkomtZvSISef5o3lXpMQknWpCFpM+AEYtUJodv8GttXj+DaWwOHA78mJCJPJDKgHwT+zvbZNeY6Eng8cEpxaAlwG1EB8Cjbr2nR9AVD7gEnCctKNT5HqNYIeIqkN9r+5ngte1gxCSVZk8bvbG8maTUA27+T9JQRXfsoIgFsMXAe0W71QkkbE864sgMGNrO9rFZe0lnA+bafL6l2i8skSAecJMHHgR1t3wwgaX3gv4B0wNW53fYHx23EhHEGIZTxu9KxrwBbjODaK9r+bwBJ77N9IYDt69TJNqzO4ySta/vW4vUTmEnQun+OMckA0gEnSXBHx/kW/JzxKtg8HMmVb4GkDYGNgcWSyhnPq1HqRjXPlPcX7+tzrgoHAz+SdAPxd94AeHORXX3S8CYubHIPOFnQlG6OOwPrEf2MDbyc2Ac+aFy2PdyYtIYg40TSy4gezLsSbSg73AOcavuHI7DhQSJRqqNc1FmFC1jF9ko153s08Ixi/HW2u516UpN0wMmCRtJxfU7b9utGZkwydUjazvaPxnTtxkpGknYo2rT2FCWx/fVex5NqZAg6WdDYfu24bUimmt0LScL7gG8BmwFvt/0f833hlpSMdia6d7281yWYvbpPapIr4CQBiszUtwB/TukmNWLh9GTK6DTdkLQ7EZJ+B3Ce7c1GaEMqGU0ouQJOkuAs4FjgG1Rv05ckg+jss74EOMX2r+snIDdmaCWjUi/onmQv6GakA06S4I95M0nmgW8UmcP3AftLWhv444htuJVoxjEMa5e+fz3xkJq0RIagkwSQ9Erg6URzgrEKpyfThaQ1iIYcDxY606vZ/uUIrttZvW5KfLYbKRllq9H2yRVwkgTPJJRqXkhpn4wRCqcn04ekfUrfl0+dMILLt61klKu1lkkHnCTB7sBTs/9z0jJblb5/FCFfeTkjcMC2/3m+r5E0Ix1wkgRXAauT3a+SFrH9lvJrSYuJPswjo4mSkaQrmFn5biipsyUjIpN681aNXWCkA06S4HHADZIuYfY+WZYhJW1yL7EfO0puZXklo18Te8NfAPopGe05v6YtbNIBJ0nw/nEbkEwfkr7BzApyEdHK8fQRmzG0kpHtn827dQuYdMBJAtg+f9w2JNODpKcRUZWPlQ4vJSQbbxuxOUMrGUn6Db2Trzoh6DXbM3PhkQ44SQBJ9zBzo3kE0UDhD7abZo4mC5NPAf9k++ryQUlbFudeOkJbmigZPWa+jVvIZB1wkvRA0m7A1rb/ady2JA8/JF1re5M5zl1j+5kjtqcVJSNJa1KSU7RdpZ90MgeLxm1Akkwits8ia4CT4emn+fvoURggaYfi310JUYUnEuHnnedSN+oz1y6SbiQSui4q/j23XYsXHhmCThJm6QJDPJhuSTYeSIbnEkn72v5C+aCk1wOXjciGNpWMDgO2B862/WxJOwN7NDdxYZMh6CRhOV3gpcD/EDWSWRec1EbS44CvAn9ixuFuSeQX7D6KVpRtIulS21tKugp4lm1Lutj21uO27eFMOuAkSZJ5QtKOQGcv+DrbIwvbtqlkJOm7wK7AEURLyzuA7W1v28jIBU464GRBI+l9fU7b9odGZkyStIik8md3OSWjOq0qJa1KNBFZBOwDLAZOsP2rFkxdsKQDThY0kg7qcXhl4oa1lu1VRmxSkrROUyUjSYd3VwT0OpbUIx1wkhQUT/lvI5zv6cDHcw84mQYkXd6kb3Ov8ZKusr1Zc+sWLpkFnSx4itrGA4FXAV8CNrf9m/FalSTjR9Ibgf2ADUpCDACrEmIOSQNyBZwsaCR9FPhb4N+Bo2z/fswmJUkrdCsZATd0TlFRyUjSGsBawIeBd5dO3ZPRoeakA04WNJIeIvrhLmV23W/nJpWtKJOHJZLW73e+rtCCpE2A5xYvL7B93bC2JUE64CRJkqQvkg4ADgDOKg69jIgYfXZ8Vj38SQecJEkyhbSpZCTpauA5nS0aSasAP7S9aSvGLlAyCStJkmQ6aVPJSMADpdcPFMeSBqQDTpIkmUJsP1h+3a1kBAxUMpK0ou2lwInAjyWdUZzanagYSBqQIegkSZIpRtIuwCeBdYG7CFWkG21vWGHssvpfSVsBzyNWvt+3fcn8Wb0wyBVwkiTJdNNEyWhZmLlwuOl0WyQdcJIkyXSz1PadkhZJku1zJB1Wcezakg6c66TtT7Rk44IkHXCSJMl0c7eklYEfACdIugN4qOLYFYBVyISreSH3gJMkSaaYJkpGTXtIJ/1ZNG4DkiRJknnlENsP2n7A9rFF2HjOsHIXufKdR9IBJ0mSTDcv7nFsl4pjd2rTkGQ2uQecJEkyhbShZGT71/NhWxLkHnCSJMkUkkpGk0864CRJkiknlYwmk9wDTpIkmWIKJaPTgScXX6dL2n+8ViWQK+AkSZKpJpWMJpdcASdJkkw3qWQ0oWQWdJIkyRSSSkaTT4agkyRJppBUMpp80gEnSZJMIZKusP3scduRzE2GoJMkSaaTVDKacNIBJ0mSTCepZDThZAg6SZJkCkklo8kny5CSJEmmk1z5Tji5Ak6SJJlCJK2ZYgqTTTrgJEmSJBkDGYJOkiRJkjGQDjhJkiRJxkA64CRJkiQZA+mAkyRJkmQMpANOkiRJkjHw/wHLuZCmB03YkgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.heatmap(telco.corr().abs())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1099, 42)"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Encode categorical variables\n",
    "encoded_cat = ohc.fit_transform(X_test[cat_var.columns.tolist()]).toarray()\n",
    "\n",
    "# Add feature names to encoded vars\n",
    "encoded=pd.DataFrame(encoded_cat, columns=ohc.get_feature_names(cat_var.columns.tolist()))\n",
    "encoded.reset_index(inplace=True, drop=True)\n",
    "X_test.reset_index(inplace=True, drop=True)\n",
    "\n",
    "# Reassemble entire training dataset\n",
    "clean_X_test = pd.concat([X_test[num_var.columns.tolist()] , encoded], axis=1,  sort=False)\n",
    "clean_X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['SeniorCitizen', 'tenure', 'NumbervMailMessages', 'TotalDayMinutes',\n",
       "       'TotalDayCalls', 'TotalEveMinutes', 'TotalEveCalls',\n",
       "       'TotalNightMinutes', 'TotalNightCalls', 'TotalIntlMinutes',\n",
       "       'TotalIntlCalls', 'CustomerServiceCalls', 'TotalCall',\n",
       "       'TotalHighBandwidthMinutes', 'TotalHighLatencyMinutes', 'TotalRevenue',\n",
       "       'gender_Male', 'MaritalStatus_Yes', 'Dependents_Yes',\n",
       "       'MultipleLines_Yes', 'InternetService_Fiber optic',\n",
       "       'InternetService_No', 'OnlineSecurity_No internet service',\n",
       "       'OnlineSecurity_Yes', 'OnlineBackup_No internet service',\n",
       "       'OnlineBackup_Yes', 'DeviceProtection_No internet service',\n",
       "       'DeviceProtection_Yes', 'TechSupport_No internet service',\n",
       "       'TechSupport_Yes', 'StreamingTV_No internet service', 'StreamingTV_Yes',\n",
       "       'StreamingMovies_No internet service', 'StreamingMovies_Yes',\n",
       "       'Contract_One year', 'Contract_Two year', 'PaperlessBilling_Yes',\n",
       "       'PaymentMethod_Credit card (automatic)',\n",
       "       'PaymentMethod_Electronic check', 'PaymentMethod_Mailed check',\n",
       "       'InternationalPlan_Yes', 'VoiceMailPlan_Yes'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_X_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>tenure</th>\n",
       "      <th>NumbervMailMessages</th>\n",
       "      <th>TotalDayMinutes</th>\n",
       "      <th>TotalDayCalls</th>\n",
       "      <th>TotalEveMinutes</th>\n",
       "      <th>TotalEveCalls</th>\n",
       "      <th>TotalNightMinutes</th>\n",
       "      <th>TotalNightCalls</th>\n",
       "      <th>TotalIntlMinutes</th>\n",
       "      <th>...</th>\n",
       "      <th>StreamingMovies_No internet service</th>\n",
       "      <th>StreamingMovies_Yes</th>\n",
       "      <th>Contract_One year</th>\n",
       "      <th>Contract_Two year</th>\n",
       "      <th>PaperlessBilling_Yes</th>\n",
       "      <th>PaymentMethod_Credit card (automatic)</th>\n",
       "      <th>PaymentMethod_Electronic check</th>\n",
       "      <th>PaymentMethod_Mailed check</th>\n",
       "      <th>InternationalPlan_Yes</th>\n",
       "      <th>VoiceMailPlan_Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2224</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2225</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2226</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2227</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2228</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2229 rows × 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      SeniorCitizen  tenure  NumbervMailMessages  TotalDayMinutes  \\\n",
       "0             False   False                False            False   \n",
       "1             False   False                False            False   \n",
       "2             False   False                False            False   \n",
       "3             False   False                False            False   \n",
       "4             False   False                False            False   \n",
       "...             ...     ...                  ...              ...   \n",
       "2224          False   False                False            False   \n",
       "2225          False   False                False            False   \n",
       "2226          False   False                False            False   \n",
       "2227          False   False                False            False   \n",
       "2228          False   False                False            False   \n",
       "\n",
       "      TotalDayCalls  TotalEveMinutes  TotalEveCalls  TotalNightMinutes  \\\n",
       "0             False            False          False              False   \n",
       "1             False            False          False              False   \n",
       "2             False            False          False              False   \n",
       "3             False            False          False              False   \n",
       "4             False            False          False              False   \n",
       "...             ...              ...            ...                ...   \n",
       "2224          False            False          False              False   \n",
       "2225          False            False          False              False   \n",
       "2226          False            False          False              False   \n",
       "2227          False            False          False              False   \n",
       "2228          False            False          False              False   \n",
       "\n",
       "      TotalNightCalls  TotalIntlMinutes  ...  \\\n",
       "0               False             False  ...   \n",
       "1               False             False  ...   \n",
       "2               False             False  ...   \n",
       "3               False             False  ...   \n",
       "4               False             False  ...   \n",
       "...               ...               ...  ...   \n",
       "2224            False             False  ...   \n",
       "2225            False             False  ...   \n",
       "2226            False             False  ...   \n",
       "2227            False             False  ...   \n",
       "2228            False             False  ...   \n",
       "\n",
       "      StreamingMovies_No internet service  StreamingMovies_Yes  \\\n",
       "0                                   False                False   \n",
       "1                                   False                False   \n",
       "2                                   False                False   \n",
       "3                                   False                False   \n",
       "4                                   False                False   \n",
       "...                                   ...                  ...   \n",
       "2224                                False                False   \n",
       "2225                                False                False   \n",
       "2226                                False                False   \n",
       "2227                                False                False   \n",
       "2228                                False                False   \n",
       "\n",
       "      Contract_One year  Contract_Two year  PaperlessBilling_Yes  \\\n",
       "0                 False              False                 False   \n",
       "1                 False              False                 False   \n",
       "2                 False              False                 False   \n",
       "3                 False              False                 False   \n",
       "4                 False              False                 False   \n",
       "...                 ...                ...                   ...   \n",
       "2224              False              False                 False   \n",
       "2225              False              False                 False   \n",
       "2226              False              False                 False   \n",
       "2227              False              False                 False   \n",
       "2228              False              False                 False   \n",
       "\n",
       "      PaymentMethod_Credit card (automatic)  PaymentMethod_Electronic check  \\\n",
       "0                                     False                           False   \n",
       "1                                     False                           False   \n",
       "2                                     False                           False   \n",
       "3                                     False                           False   \n",
       "4                                     False                           False   \n",
       "...                                     ...                             ...   \n",
       "2224                                  False                           False   \n",
       "2225                                  False                           False   \n",
       "2226                                  False                           False   \n",
       "2227                                  False                           False   \n",
       "2228                                  False                           False   \n",
       "\n",
       "      PaymentMethod_Mailed check  InternationalPlan_Yes  VoiceMailPlan_Yes  \n",
       "0                          False                  False              False  \n",
       "1                          False                  False              False  \n",
       "2                          False                  False              False  \n",
       "3                          False                  False              False  \n",
       "4                          False                  False              False  \n",
       "...                          ...                    ...                ...  \n",
       "2224                       False                  False              False  \n",
       "2225                       False                  False              False  \n",
       "2226                       False                  False              False  \n",
       "2227                       False                  False              False  \n",
       "2228                       False                  False              False  \n",
       "\n",
       "[2229 rows x 42 columns]"
      ]
     },
     "execution_count": 305,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_X_train.isna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top Absolute Correlations\n",
      "InternetService_No                    StreamingTV_No internet service         1.000000\n",
      "OnlineSecurity_No internet service    DeviceProtection_No internet service    1.000000\n",
      "InternetService_No                    DeviceProtection_No internet service    1.000000\n",
      "                                      TechSupport_No internet service         1.000000\n",
      "                                      StreamingMovies_No internet service     1.000000\n",
      "OnlineBackup_No internet service      StreamingMovies_No internet service     1.000000\n",
      "OnlineSecurity_No internet service    OnlineBackup_No internet service        1.000000\n",
      "OnlineBackup_No internet service      StreamingTV_No internet service         1.000000\n",
      "TechSupport_No internet service       StreamingTV_No internet service         1.000000\n",
      "InternetService_No                    OnlineBackup_No internet service        1.000000\n",
      "OnlineSecurity_No internet service    TechSupport_No internet service         1.000000\n",
      "TechSupport_No internet service       StreamingMovies_No internet service     1.000000\n",
      "OnlineSecurity_No internet service    StreamingTV_No internet service         1.000000\n",
      "                                      StreamingMovies_No internet service     1.000000\n",
      "OnlineBackup_No internet service      TechSupport_No internet service         1.000000\n",
      "                                      DeviceProtection_No internet service    1.000000\n",
      "DeviceProtection_No internet service  StreamingMovies_No internet service     1.000000\n",
      "StreamingTV_No internet service       StreamingMovies_No internet service     1.000000\n",
      "DeviceProtection_No internet service  StreamingTV_No internet service         1.000000\n",
      "                                      TechSupport_No internet service         1.000000\n",
      "InternetService_No                    OnlineSecurity_No internet service      1.000000\n",
      "NumbervMailMessages                   VoiceMailPlan_Yes                       0.960275\n",
      "TotalHighBandwidthMinutes             StreamingTV_Yes                         0.891717\n",
      "                                      TotalHighLatencyMinutes                 0.830677\n",
      "tenure                                TotalRevenue                            0.784325\n",
      "TotalHighLatencyMinutes               StreamingTV_Yes                         0.733882\n",
      "TotalHighBandwidthMinutes             StreamingMovies_Yes                     0.623750\n",
      "TotalEveCalls                         TotalCall                               0.596269\n",
      "TotalNightCalls                       TotalCall                               0.579581\n",
      "StreamingTV_Yes                       StreamingMovies_Yes                     0.562443\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def get_redundant_pairs(df):\n",
    "    '''Get diagonal and lower triangular pairs of correlation matrix'''\n",
    "    pairs_to_drop = set()\n",
    "    cols = df.columns\n",
    "    for i in range(0, df.shape[1]):\n",
    "        for j in range(0, i+1):\n",
    "            pairs_to_drop.add((cols[i], cols[j]))\n",
    "    return pairs_to_drop\n",
    "\n",
    "def get_top_abs_correlations(df, n=5):\n",
    "    au_corr = df.corr().abs().unstack()\n",
    "    labels_to_drop = get_redundant_pairs(df)\n",
    "    au_corr = au_corr.drop(labels=labels_to_drop).sort_values(ascending=False)\n",
    "    return au_corr[0:n]\n",
    "\n",
    "print(\"Top Absolute Correlations\")\n",
    "print(get_top_abs_correlations(clean_X_test, 30))\n",
    "\n",
    "\n",
    "# print(\"Redundant pairs\")\n",
    "# get_redundant_pairs(clean_X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>tenure</th>\n",
       "      <th>NumbervMailMessages</th>\n",
       "      <th>TotalDayMinutes</th>\n",
       "      <th>TotalDayCalls</th>\n",
       "      <th>TotalEveMinutes</th>\n",
       "      <th>TotalEveCalls</th>\n",
       "      <th>TotalNightMinutes</th>\n",
       "      <th>TotalNightCalls</th>\n",
       "      <th>TotalIntlMinutes</th>\n",
       "      <th>...</th>\n",
       "      <th>StreamingMovies_No internet service</th>\n",
       "      <th>StreamingMovies_Yes</th>\n",
       "      <th>Contract_One year</th>\n",
       "      <th>Contract_Two year</th>\n",
       "      <th>PaperlessBilling_Yes</th>\n",
       "      <th>PaymentMethod_Credit card (automatic)</th>\n",
       "      <th>PaymentMethod_Electronic check</th>\n",
       "      <th>PaymentMethod_Mailed check</th>\n",
       "      <th>InternationalPlan_Yes</th>\n",
       "      <th>VoiceMailPlan_Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>97.2</td>\n",
       "      <td>88</td>\n",
       "      <td>155.6</td>\n",
       "      <td>85</td>\n",
       "      <td>261.6</td>\n",
       "      <td>105</td>\n",
       "      <td>12.4</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>34</td>\n",
       "      <td>138.8</td>\n",
       "      <td>80</td>\n",
       "      <td>142.0</td>\n",
       "      <td>108</td>\n",
       "      <td>183.8</td>\n",
       "      <td>77</td>\n",
       "      <td>11.8</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>179.7</td>\n",
       "      <td>128</td>\n",
       "      <td>299.8</td>\n",
       "      <td>92</td>\n",
       "      <td>185.3</td>\n",
       "      <td>120</td>\n",
       "      <td>7.6</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>298.4</td>\n",
       "      <td>78</td>\n",
       "      <td>270.5</td>\n",
       "      <td>142</td>\n",
       "      <td>107.3</td>\n",
       "      <td>84</td>\n",
       "      <td>12.2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>189.3</td>\n",
       "      <td>77</td>\n",
       "      <td>155.9</td>\n",
       "      <td>128</td>\n",
       "      <td>186.0</td>\n",
       "      <td>83</td>\n",
       "      <td>7.4</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   SeniorCitizen  tenure  NumbervMailMessages  TotalDayMinutes  TotalDayCalls  \\\n",
       "0              0       1                    0             97.2             88   \n",
       "1              0      58                   34            138.8             80   \n",
       "2              0       1                    0            179.7            128   \n",
       "3              0       4                    0            298.4             78   \n",
       "4              0       1                    0            189.3             77   \n",
       "\n",
       "   TotalEveMinutes  TotalEveCalls  TotalNightMinutes  TotalNightCalls  \\\n",
       "0            155.6             85              261.6              105   \n",
       "1            142.0            108              183.8               77   \n",
       "2            299.8             92              185.3              120   \n",
       "3            270.5            142              107.3               84   \n",
       "4            155.9            128              186.0               83   \n",
       "\n",
       "   TotalIntlMinutes  ...  StreamingMovies_No internet service  \\\n",
       "0              12.4  ...                                  1.0   \n",
       "1              11.8  ...                                  0.0   \n",
       "2               7.6  ...                                  1.0   \n",
       "3              12.2  ...                                  0.0   \n",
       "4               7.4  ...                                  1.0   \n",
       "\n",
       "   StreamingMovies_Yes  Contract_One year  Contract_Two year  \\\n",
       "0                  0.0                0.0                0.0   \n",
       "1                  1.0                0.0                0.0   \n",
       "2                  0.0                1.0                0.0   \n",
       "3                  0.0                0.0                0.0   \n",
       "4                  0.0                0.0                0.0   \n",
       "\n",
       "   PaperlessBilling_Yes  PaymentMethod_Credit card (automatic)  \\\n",
       "0                   0.0                                    0.0   \n",
       "1                   1.0                                    0.0   \n",
       "2                   0.0                                    1.0   \n",
       "3                   0.0                                    0.0   \n",
       "4                   0.0                                    0.0   \n",
       "\n",
       "   PaymentMethod_Electronic check  PaymentMethod_Mailed check  \\\n",
       "0                             0.0                         1.0   \n",
       "1                             1.0                         0.0   \n",
       "2                             0.0                         0.0   \n",
       "3                             1.0                         0.0   \n",
       "4                             0.0                         1.0   \n",
       "\n",
       "   InternationalPlan_Yes  VoiceMailPlan_Yes  \n",
       "0                    0.0                0.0  \n",
       "1                    0.0                1.0  \n",
       "2                    0.0                0.0  \n",
       "3                    1.0                0.0  \n",
       "4                    0.0                0.0  \n",
       "\n",
       "[5 rows x 42 columns]"
      ]
     },
     "execution_count": 307,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_X_train.head()\n",
    "# if tenure less than contract_one year or contract_two year && churn == 1, then they qualify as early churn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "%matplotlib inline\n",
    "\n",
    "from IPython.display import display, HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgrg1 = LogisticRegression(random_state = 100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 5: Create models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model 1: Vanilla"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [],
   "source": [
    "ss = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>MaritalStatus</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>tenure</th>\n",
       "      <th>PhoneService</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>...</th>\n",
       "      <th>TotalEveCalls</th>\n",
       "      <th>TotalNightMinutes</th>\n",
       "      <th>TotalNightCalls</th>\n",
       "      <th>TotalIntlMinutes</th>\n",
       "      <th>TotalIntlCalls</th>\n",
       "      <th>CustomerServiceCalls</th>\n",
       "      <th>TotalCall</th>\n",
       "      <th>TotalHighBandwidthMinutes</th>\n",
       "      <th>TotalHighLatencyMinutes</th>\n",
       "      <th>TotalRevenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>55</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>91</td>\n",
       "      <td>221.6</td>\n",
       "      <td>77</td>\n",
       "      <td>11.6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>269</td>\n",
       "      <td>159</td>\n",
       "      <td>12</td>\n",
       "      <td>3119.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>37</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No internet service</td>\n",
       "      <td>No internet service</td>\n",
       "      <td>...</td>\n",
       "      <td>70</td>\n",
       "      <td>220.6</td>\n",
       "      <td>97</td>\n",
       "      <td>7.2</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>276</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>683.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>83</td>\n",
       "      <td>147.7</td>\n",
       "      <td>114</td>\n",
       "      <td>5.3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>278</td>\n",
       "      <td>256</td>\n",
       "      <td>33</td>\n",
       "      <td>387.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>64</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>94</td>\n",
       "      <td>172.7</td>\n",
       "      <td>107</td>\n",
       "      <td>7.1</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>317</td>\n",
       "      <td>1335</td>\n",
       "      <td>253</td>\n",
       "      <td>6314.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>9</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>77</td>\n",
       "      <td>197.3</td>\n",
       "      <td>138</td>\n",
       "      <td>10.5</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>322</td>\n",
       "      <td>2854</td>\n",
       "      <td>542</td>\n",
       "      <td>918.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   gender  SeniorCitizen MaritalStatus Dependents  tenure PhoneService  \\\n",
       "0    Male              0           Yes        Yes      55          Yes   \n",
       "1  Female              0           Yes        Yes      37          Yes   \n",
       "2  Female              0            No         No       4          Yes   \n",
       "3  Female              0           Yes         No      64          Yes   \n",
       "4    Male              0            No         No       9          Yes   \n",
       "\n",
       "  MultipleLines InternetService       OnlineSecurity         OnlineBackup  \\\n",
       "0            No             DSL                   No                   No   \n",
       "1            No              No  No internet service  No internet service   \n",
       "2            No     Fiber optic                  Yes                   No   \n",
       "3            No     Fiber optic                  Yes                   No   \n",
       "4           Yes     Fiber optic                   No                  Yes   \n",
       "\n",
       "   ... TotalEveCalls TotalNightMinutes TotalNightCalls TotalIntlMinutes  \\\n",
       "0  ...            91             221.6              77             11.6   \n",
       "1  ...            70             220.6              97              7.2   \n",
       "2  ...            83             147.7             114              5.3   \n",
       "3  ...            94             172.7             107              7.1   \n",
       "4  ...            77             197.3             138             10.5   \n",
       "\n",
       "  TotalIntlCalls CustomerServiceCalls TotalCall TotalHighBandwidthMinutes  \\\n",
       "0              1                    1       269                       159   \n",
       "1              9                    2       276                         0   \n",
       "2              4                    6       278                       256   \n",
       "3              9                    3       317                      1335   \n",
       "4              2                    2       322                      2854   \n",
       "\n",
       "  TotalHighLatencyMinutes  TotalRevenue  \n",
       "0                      12        3119.9  \n",
       "1                       0         683.8  \n",
       "2                      33         387.2  \n",
       "3                     253        6314.4  \n",
       "4                     542         918.8  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_transformed = ss.fit_transform(clean_X_train)\n",
    "X_test_transformed = ss.transform(clean_X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgrg1.fit(X_train_transformed, y_train)\n",
    "y_pred_train = lgrg1.predict(X_train_transformed)\n",
    "y_pred_test = lgrg1.predict(X_test_transformed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:\n",
      "========\n",
      "TRAIN: 0.8694\n",
      "TEST: 0.8471\n",
      "***************\n",
      "Recall:\n",
      "======\n",
      "TRAIN: 0.5399\n",
      "TEST: 0.5066\n",
      "***************\n",
      "Precision:\n",
      "=========\n",
      "TRAIN: 0.7077\n",
      "TEST: 0.6725\n",
      "***************\n",
      "F1-Score:\n",
      "========\n",
      "TRAIN: 0.6125\n",
      "TEST: 0.5779\n",
      "***************\n"
     ]
    }
   ],
   "source": [
    "metrics = {\"Accuracy\": accuracy_score,\n",
    "           \"Recall\": recall_score,\n",
    "           \"Precision\": precision_score,\n",
    "           \"F1-Score\": f1_score}\n",
    "\n",
    "for name, metric_function in metrics.items():\n",
    "    print(f\"{name}:\"); print(\"=\"*len(name))\n",
    "    print(f\"TRAIN: {metric_function(y_train, y_pred_train):.4f}\")\n",
    "    print(f\"TEST: {metric_function(y_test, y_pred_test):.4f}\")\n",
    "    print(\"*\" * 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(lgrg1, X_test_transformed, y_test,\n",
    "                      cmap=plt.cm.Blues, # Changing the color scheme\n",
    "                      values_format=\".3g\") # Formatting the numbers properly\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-316-49ff8087536e>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-316-49ff8087536e>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    Looks like false negatives are very high, need to find a better model\u001b[0m\n\u001b[0m             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "Looks like false negatives are very high, need to find a better model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model 2: Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgrg2 = LogisticRegression(random_state = 100)\n",
    "\n",
    "X_train_eng = clean_X_train\n",
    "X_test_eng = clean_X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>tenure</th>\n",
       "      <th>NumbervMailMessages</th>\n",
       "      <th>TotalDayMinutes</th>\n",
       "      <th>TotalDayCalls</th>\n",
       "      <th>TotalEveMinutes</th>\n",
       "      <th>TotalEveCalls</th>\n",
       "      <th>TotalNightMinutes</th>\n",
       "      <th>TotalNightCalls</th>\n",
       "      <th>TotalIntlMinutes</th>\n",
       "      <th>...</th>\n",
       "      <th>StreamingMovies_No internet service</th>\n",
       "      <th>StreamingMovies_Yes</th>\n",
       "      <th>Contract_One year</th>\n",
       "      <th>Contract_Two year</th>\n",
       "      <th>PaperlessBilling_Yes</th>\n",
       "      <th>PaymentMethod_Credit card (automatic)</th>\n",
       "      <th>PaymentMethod_Electronic check</th>\n",
       "      <th>PaymentMethod_Mailed check</th>\n",
       "      <th>InternationalPlan_Yes</th>\n",
       "      <th>VoiceMailPlan_Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>97.2</td>\n",
       "      <td>88</td>\n",
       "      <td>155.6</td>\n",
       "      <td>85</td>\n",
       "      <td>261.6</td>\n",
       "      <td>105</td>\n",
       "      <td>12.4</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>34</td>\n",
       "      <td>138.8</td>\n",
       "      <td>80</td>\n",
       "      <td>142.0</td>\n",
       "      <td>108</td>\n",
       "      <td>183.8</td>\n",
       "      <td>77</td>\n",
       "      <td>11.8</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>179.7</td>\n",
       "      <td>128</td>\n",
       "      <td>299.8</td>\n",
       "      <td>92</td>\n",
       "      <td>185.3</td>\n",
       "      <td>120</td>\n",
       "      <td>7.6</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>298.4</td>\n",
       "      <td>78</td>\n",
       "      <td>270.5</td>\n",
       "      <td>142</td>\n",
       "      <td>107.3</td>\n",
       "      <td>84</td>\n",
       "      <td>12.2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>189.3</td>\n",
       "      <td>77</td>\n",
       "      <td>155.9</td>\n",
       "      <td>128</td>\n",
       "      <td>186.0</td>\n",
       "      <td>83</td>\n",
       "      <td>7.4</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   SeniorCitizen  tenure  NumbervMailMessages  TotalDayMinutes  TotalDayCalls  \\\n",
       "0              0       1                    0             97.2             88   \n",
       "1              0      58                   34            138.8             80   \n",
       "2              0       1                    0            179.7            128   \n",
       "3              0       4                    0            298.4             78   \n",
       "4              0       1                    0            189.3             77   \n",
       "\n",
       "   TotalEveMinutes  TotalEveCalls  TotalNightMinutes  TotalNightCalls  \\\n",
       "0            155.6             85              261.6              105   \n",
       "1            142.0            108              183.8               77   \n",
       "2            299.8             92              185.3              120   \n",
       "3            270.5            142              107.3               84   \n",
       "4            155.9            128              186.0               83   \n",
       "\n",
       "   TotalIntlMinutes  ...  StreamingMovies_No internet service  \\\n",
       "0              12.4  ...                                  1.0   \n",
       "1              11.8  ...                                  0.0   \n",
       "2               7.6  ...                                  1.0   \n",
       "3              12.2  ...                                  0.0   \n",
       "4               7.4  ...                                  1.0   \n",
       "\n",
       "   StreamingMovies_Yes  Contract_One year  Contract_Two year  \\\n",
       "0                  0.0                0.0                0.0   \n",
       "1                  1.0                0.0                0.0   \n",
       "2                  0.0                1.0                0.0   \n",
       "3                  0.0                0.0                0.0   \n",
       "4                  0.0                0.0                0.0   \n",
       "\n",
       "   PaperlessBilling_Yes  PaymentMethod_Credit card (automatic)  \\\n",
       "0                   0.0                                    0.0   \n",
       "1                   1.0                                    0.0   \n",
       "2                   0.0                                    1.0   \n",
       "3                   0.0                                    0.0   \n",
       "4                   0.0                                    0.0   \n",
       "\n",
       "   PaymentMethod_Electronic check  PaymentMethod_Mailed check  \\\n",
       "0                             0.0                         1.0   \n",
       "1                             1.0                         0.0   \n",
       "2                             0.0                         0.0   \n",
       "3                             1.0                         0.0   \n",
       "4                             0.0                         1.0   \n",
       "\n",
       "   InternationalPlan_Yes  VoiceMailPlan_Yes  \n",
       "0                    0.0                0.0  \n",
       "1                    0.0                1.0  \n",
       "2                    0.0                0.0  \n",
       "3                    1.0                0.0  \n",
       "4                    0.0                0.0  \n",
       "\n",
       "[5 rows x 42 columns]"
      ]
     },
     "execution_count": 318,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [],
   "source": [
    "ColList = ['TotalDayMinutes','TotalDayCalls', 'TotalEveMinutes', 'TotalEveCalls','TotalNightMinutes', 'TotalNightCalls', 'TotalIntlMinutes','TotalIntlCalls', 'CustomerServiceCalls', 'TotalCall', 'TotalHighBandwidthMinutes', 'TotalHighLatencyMinutes', 'TotalRevenue']\n",
    "\n",
    "for i in ColList:\n",
    "    X_train_eng[i] = X_train_eng.apply(lambda row: ((row[i]) / (row['tenure'])), axis=1)\n",
    "    X_test_eng[i] = X_test_eng.apply(lambda row: ((row[i]) / (row['tenure'])), axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['SeniorCitizen', 'tenure', 'NumbervMailMessages', 'TotalDayMinutes',\n",
       "       'TotalDayCalls', 'TotalEveMinutes', 'TotalEveCalls',\n",
       "       'TotalNightMinutes', 'TotalNightCalls', 'TotalIntlMinutes',\n",
       "       'TotalIntlCalls', 'CustomerServiceCalls', 'TotalCall',\n",
       "       'TotalHighBandwidthMinutes', 'TotalHighLatencyMinutes', 'TotalRevenue',\n",
       "       'gender_Male', 'MaritalStatus_Yes', 'Dependents_Yes',\n",
       "       'MultipleLines_Yes', 'InternetService_Fiber optic',\n",
       "       'InternetService_No', 'OnlineSecurity_No internet service',\n",
       "       'OnlineSecurity_Yes', 'OnlineBackup_No internet service',\n",
       "       'OnlineBackup_Yes', 'DeviceProtection_No internet service',\n",
       "       'DeviceProtection_Yes', 'TechSupport_No internet service',\n",
       "       'TechSupport_Yes', 'StreamingTV_No internet service', 'StreamingTV_Yes',\n",
       "       'StreamingMovies_No internet service', 'StreamingMovies_Yes',\n",
       "       'Contract_One year', 'Contract_Two year', 'PaperlessBilling_Yes',\n",
       "       'PaymentMethod_Credit card (automatic)',\n",
       "       'PaymentMethod_Electronic check', 'PaymentMethod_Mailed check',\n",
       "       'InternationalPlan_Yes', 'VoiceMailPlan_Yes'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 370,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_eng.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>tenure</th>\n",
       "      <th>NumbervMailMessages</th>\n",
       "      <th>TotalDayMinutes</th>\n",
       "      <th>TotalDayCalls</th>\n",
       "      <th>TotalEveMinutes</th>\n",
       "      <th>TotalEveCalls</th>\n",
       "      <th>TotalNightMinutes</th>\n",
       "      <th>TotalNightCalls</th>\n",
       "      <th>TotalIntlMinutes</th>\n",
       "      <th>...</th>\n",
       "      <th>StreamingMovies_No internet service</th>\n",
       "      <th>StreamingMovies_Yes</th>\n",
       "      <th>Contract_One year</th>\n",
       "      <th>Contract_Two year</th>\n",
       "      <th>PaperlessBilling_Yes</th>\n",
       "      <th>PaymentMethod_Credit card (automatic)</th>\n",
       "      <th>PaymentMethod_Electronic check</th>\n",
       "      <th>PaymentMethod_Mailed check</th>\n",
       "      <th>InternationalPlan_Yes</th>\n",
       "      <th>VoiceMailPlan_Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>97.200000</td>\n",
       "      <td>88.000000</td>\n",
       "      <td>155.600000</td>\n",
       "      <td>85.000000</td>\n",
       "      <td>261.600000</td>\n",
       "      <td>105.000000</td>\n",
       "      <td>12.400000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>34</td>\n",
       "      <td>2.393103</td>\n",
       "      <td>1.379310</td>\n",
       "      <td>2.448276</td>\n",
       "      <td>1.862069</td>\n",
       "      <td>3.168966</td>\n",
       "      <td>1.327586</td>\n",
       "      <td>0.203448</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>179.700000</td>\n",
       "      <td>128.000000</td>\n",
       "      <td>299.800000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>185.300000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>7.600000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>74.600000</td>\n",
       "      <td>19.500000</td>\n",
       "      <td>67.625000</td>\n",
       "      <td>35.500000</td>\n",
       "      <td>26.825000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>3.050000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>189.300000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>155.900000</td>\n",
       "      <td>128.000000</td>\n",
       "      <td>186.000000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>7.400000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2224</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>26</td>\n",
       "      <td>56.833333</td>\n",
       "      <td>35.666667</td>\n",
       "      <td>72.400000</td>\n",
       "      <td>25.666667</td>\n",
       "      <td>75.233333</td>\n",
       "      <td>23.666667</td>\n",
       "      <td>4.533333</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2225</th>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>3.697143</td>\n",
       "      <td>2.771429</td>\n",
       "      <td>5.297143</td>\n",
       "      <td>2.885714</td>\n",
       "      <td>5.848571</td>\n",
       "      <td>3.028571</td>\n",
       "      <td>0.031429</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2226</th>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>3.412500</td>\n",
       "      <td>3.125000</td>\n",
       "      <td>10.575000</td>\n",
       "      <td>4.750000</td>\n",
       "      <td>8.879167</td>\n",
       "      <td>5.208333</td>\n",
       "      <td>0.370833</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2227</th>\n",
       "      <td>0</td>\n",
       "      <td>64</td>\n",
       "      <td>37</td>\n",
       "      <td>2.554688</td>\n",
       "      <td>1.203125</td>\n",
       "      <td>3.173437</td>\n",
       "      <td>1.593750</td>\n",
       "      <td>3.625000</td>\n",
       "      <td>1.359375</td>\n",
       "      <td>0.121875</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2228</th>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>3.609836</td>\n",
       "      <td>1.459016</td>\n",
       "      <td>1.447541</td>\n",
       "      <td>2.049180</td>\n",
       "      <td>3.201639</td>\n",
       "      <td>1.295082</td>\n",
       "      <td>0.211475</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2229 rows × 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      SeniorCitizen  tenure  NumbervMailMessages  TotalDayMinutes  \\\n",
       "0                 0       1                    0        97.200000   \n",
       "1                 0      58                   34         2.393103   \n",
       "2                 0       1                    0       179.700000   \n",
       "3                 0       4                    0        74.600000   \n",
       "4                 0       1                    0       189.300000   \n",
       "...             ...     ...                  ...              ...   \n",
       "2224              0       3                   26        56.833333   \n",
       "2225              0      35                    0         3.697143   \n",
       "2226              0      24                    0         3.412500   \n",
       "2227              0      64                   37         2.554688   \n",
       "2228              0      61                    0         3.609836   \n",
       "\n",
       "      TotalDayCalls  TotalEveMinutes  TotalEveCalls  TotalNightMinutes  \\\n",
       "0         88.000000       155.600000      85.000000         261.600000   \n",
       "1          1.379310         2.448276       1.862069           3.168966   \n",
       "2        128.000000       299.800000      92.000000         185.300000   \n",
       "3         19.500000        67.625000      35.500000          26.825000   \n",
       "4         77.000000       155.900000     128.000000         186.000000   \n",
       "...             ...              ...            ...                ...   \n",
       "2224      35.666667        72.400000      25.666667          75.233333   \n",
       "2225       2.771429         5.297143       2.885714           5.848571   \n",
       "2226       3.125000        10.575000       4.750000           8.879167   \n",
       "2227       1.203125         3.173437       1.593750           3.625000   \n",
       "2228       1.459016         1.447541       2.049180           3.201639   \n",
       "\n",
       "      TotalNightCalls  TotalIntlMinutes  ...  \\\n",
       "0          105.000000         12.400000  ...   \n",
       "1            1.327586          0.203448  ...   \n",
       "2          120.000000          7.600000  ...   \n",
       "3           21.000000          3.050000  ...   \n",
       "4           83.000000          7.400000  ...   \n",
       "...               ...               ...  ...   \n",
       "2224        23.666667          4.533333  ...   \n",
       "2225         3.028571          0.031429  ...   \n",
       "2226         5.208333          0.370833  ...   \n",
       "2227         1.359375          0.121875  ...   \n",
       "2228         1.295082          0.211475  ...   \n",
       "\n",
       "      StreamingMovies_No internet service  StreamingMovies_Yes  \\\n",
       "0                                     1.0                  0.0   \n",
       "1                                     0.0                  1.0   \n",
       "2                                     1.0                  0.0   \n",
       "3                                     0.0                  0.0   \n",
       "4                                     1.0                  0.0   \n",
       "...                                   ...                  ...   \n",
       "2224                                  0.0                  1.0   \n",
       "2225                                  1.0                  0.0   \n",
       "2226                                  0.0                  0.0   \n",
       "2227                                  1.0                  0.0   \n",
       "2228                                  0.0                  1.0   \n",
       "\n",
       "      Contract_One year  Contract_Two year  PaperlessBilling_Yes  \\\n",
       "0                   0.0                0.0                   0.0   \n",
       "1                   0.0                0.0                   1.0   \n",
       "2                   1.0                0.0                   0.0   \n",
       "3                   0.0                0.0                   0.0   \n",
       "4                   0.0                0.0                   0.0   \n",
       "...                 ...                ...                   ...   \n",
       "2224                0.0                0.0                   1.0   \n",
       "2225                0.0                1.0                   0.0   \n",
       "2226                0.0                0.0                   1.0   \n",
       "2227                0.0                1.0                   0.0   \n",
       "2228                0.0                1.0                   1.0   \n",
       "\n",
       "      PaymentMethod_Credit card (automatic)  PaymentMethod_Electronic check  \\\n",
       "0                                       0.0                             0.0   \n",
       "1                                       0.0                             1.0   \n",
       "2                                       1.0                             0.0   \n",
       "3                                       0.0                             1.0   \n",
       "4                                       0.0                             0.0   \n",
       "...                                     ...                             ...   \n",
       "2224                                    0.0                             1.0   \n",
       "2225                                    1.0                             0.0   \n",
       "2226                                    0.0                             0.0   \n",
       "2227                                    0.0                             0.0   \n",
       "2228                                    0.0                             0.0   \n",
       "\n",
       "      PaymentMethod_Mailed check  InternationalPlan_Yes  VoiceMailPlan_Yes  \n",
       "0                            1.0                    0.0                0.0  \n",
       "1                            0.0                    0.0                1.0  \n",
       "2                            0.0                    0.0                0.0  \n",
       "3                            0.0                    1.0                0.0  \n",
       "4                            1.0                    0.0                0.0  \n",
       "...                          ...                    ...                ...  \n",
       "2224                         0.0                    0.0                1.0  \n",
       "2225                         0.0                    0.0                0.0  \n",
       "2226                         0.0                    0.0                0.0  \n",
       "2227                         1.0                    0.0                1.0  \n",
       "2228                         1.0                    0.0                0.0  \n",
       "\n",
       "[2229 rows x 42 columns]"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_eng"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colm-m-farrell/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
     ]
    }
   ],
   "source": [
    "# Transform, Fit and Predict\n",
    "\n",
    "X_train_transformed = ss.fit_transform(X_train_eng)\n",
    "X_test_transformed = ss.transform(X_test_eng)\n",
    "\n",
    "lgrg2.fit(X_train_eng, y_train)\n",
    "y_pred_train = lgrg2.predict(X_train_eng)\n",
    "y_pred_test = lgrg2.predict(X_test_eng)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:\n",
      "========\n",
      "TRAIN: 0.8488\n",
      "TEST: 0.8126\n",
      "***************\n",
      "Recall:\n",
      "======\n",
      "TRAIN: 0.4460\n",
      "TEST: 0.3789\n",
      "***************\n",
      "Precision:\n",
      "=========\n",
      "TRAIN: 0.6529\n",
      "TEST: 0.5695\n",
      "***************\n",
      "F1-Score:\n",
      "========\n",
      "TRAIN: 0.5300\n",
      "TEST: 0.4550\n",
      "***************\n"
     ]
    }
   ],
   "source": [
    "metrics = {\"Accuracy\": accuracy_score,\n",
    "           \"Recall\": recall_score,\n",
    "           \"Precision\": precision_score,\n",
    "           \"F1-Score\": f1_score}\n",
    "\n",
    "for name, metric_function in metrics.items():\n",
    "    print(f\"{name}:\"); print(\"=\"*len(name))\n",
    "    print(f\"TRAIN: {metric_function(y_train, y_pred_train):.4f}\")\n",
    "    print(f\"TEST: {metric_function(y_test, y_pred_test):.4f}\")\n",
    "    print(\"*\" * 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(lgrg2, clean_X_test, y_test,\n",
    "                      cmap=plt.cm.Blues, # Changing the color scheme\n",
    "                      values_format=\".3g\") # Formatting the numbers properly\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model 3: Adjusted Penalization and Weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgrg3 = LogisticRegression(random_state = 100, C=1, class_weight={0:.1, 1:.9})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colm-m-farrell/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
     ]
    }
   ],
   "source": [
    "X_train_transformed = ss.fit_transform(clean_X_train)\n",
    "X_test_transformed = ss.transform(clean_X_test)\n",
    "\n",
    "lgrg3.fit(clean_X_train, y_train)\n",
    "y_pred_train = lgrg3.predict(clean_X_train)\n",
    "y_pred_test = lgrg3.predict(clean_X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 402,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:\n",
      "========\n",
      "TRAIN: 0.7066\n",
      "TEST: 0.6779\n",
      "***************\n",
      "Recall:\n",
      "======\n",
      "TRAIN: 0.9272\n",
      "TEST: 0.9207\n",
      "***************\n",
      "Precision:\n",
      "=========\n",
      "TRAIN: 0.3880\n",
      "TEST: 0.3835\n",
      "***************\n",
      "F1-Score:\n",
      "========\n",
      "TRAIN: 0.5471\n",
      "TEST: 0.5415\n",
      "***************\n"
     ]
    }
   ],
   "source": [
    "metrics = {\"Accuracy\": accuracy_score,\n",
    "           \"Recall\": recall_score,\n",
    "           \"Precision\": precision_score,\n",
    "           \"F1-Score\": f1_score}\n",
    "\n",
    "for name, metric_function in metrics.items():\n",
    "    print(f\"{name}:\"); print(\"=\"*len(name))\n",
    "    print(f\"TRAIN: {metric_function(y_train, y_pred_train):.4f}\")\n",
    "    print(f\"TEST: {metric_function(y_test, y_pred_test):.4f}\")\n",
    "    print(\"*\" * 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 403,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(lgrg3, X_test_eng, y_test,\n",
    "                      cmap=plt.cm.Blues, # Changing the color scheme\n",
    "                      values_format=\".3g\") # Formatting the numbers properly\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 6: Pick model & find best threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 408,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_pred_probs = lgrg3.predict_proba(clean_X_train)[:, 1]\n",
    "y_test_pred_probs = lgrg3.predict_proba(clean_X_test)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "metadata": {},
   "outputs": [],
   "source": [
    "metrics_df = pd.DataFrame(columns=['threshold', 'train_acc', 'test_acc'])\n",
    "\n",
    "for x in np.arange(y_train_pred_probs.min(), y_train_pred_probs.max(), 0.01):\n",
    "    placeholder = []\n",
    "    threshold = x\n",
    "    y_pred_train = np.where(y_train_pred_probs > x, 1, 0)\n",
    "    r_pred_test = np.where(y_test_pred_probs > x, 1, 0)\n",
    "    train_acc = accuracy_score(y_train, y_pred_train)\n",
    "    test_acc = accuracy_score(y_test, r_pred_test)\n",
    "    placeholder = [threshold, train_acc, test_acc]\n",
    "    sample_S = pd.Series(placeholder, index=[\n",
    "                         'threshold', 'train_acc', 'test_acc'])\n",
    "    metrics_df = metrics_df.append(sample_S, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fc236928c50>"
      ]
     },
     "execution_count": 417,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x936 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(13, 13))\n",
    "plt.title(\"Search for Best Threshold using Accuracy\",\n",
    "          fontsize=16)\n",
    "\n",
    "plt.xlabel(\"Threshold\")\n",
    "plt.ylabel(\"Score\")\n",
    "plt.grid(True)\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.set_xlim(y_train_pred_probs.min(), y_train_pred_probs.max())\n",
    "ax.set_ylim(0, 1)\n",
    "ax.xaxis.set_major_locator(MaxNLocator(20))\n",
    "ax.yaxis.set_major_locator(MaxNLocator(20))\n",
    "\n",
    "# Get the regular numpy array from the MaskedArray\n",
    "X_axis = np.array(metrics_df['threshold'], dtype=float)\n",
    "\n",
    "ax.plot(X_axis, metrics_df['train_acc'], ls='--',\n",
    "        color='g', label='Train Accuracy')\n",
    "ax.plot(X_axis, metrics_df['test_acc'], ls='-',\n",
    "        color='g', label='Test Accuracy')\n",
    "\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 420,
   "metadata": {},
   "outputs": [],
   "source": [
    "metrics_df = pd.DataFrame(columns=['threshold', 'train_acc', 'test_acc'])\n",
    "\n",
    "for x in np.arange(y_train_pred_probs.min(), y_train_pred_probs.max(), 0.01):\n",
    "    placeholder = []\n",
    "    threshold = x\n",
    "    y_pred_train = np.where(y_train_pred_probs > x, 1, 0)\n",
    "    r_pred_test = np.where(y_test_pred_probs > x, 1, 0)\n",
    "    train_f1 = f1_score(y_train, y_pred_train)\n",
    "    test_f1 = f1_score(y_test, r_pred_test)\n",
    "    placeholder = [threshold, train_f1, test_f1]\n",
    "    sample_S = pd.Series(placeholder, index=[\n",
    "                         'threshold', 'train_f1', 'test_f1'])\n",
    "    metrics_df = metrics_df.append(sample_S, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fc236402550>"
      ]
     },
     "execution_count": 421,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x936 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(13, 13))\n",
    "plt.title(\"Search for Best Threshold using F1 Score\",\n",
    "          fontsize=16)\n",
    "\n",
    "plt.xlabel(\"Threshold\")\n",
    "plt.ylabel(\"Score\")\n",
    "plt.grid(True)\n",
    "\n",
    "ax = plt.gca()\n",
    "ax.set_xlim(y_train_pred_probs.min(), y_train_pred_probs.max())\n",
    "ax.set_ylim(0, 1)\n",
    "ax.xaxis.set_major_locator(MaxNLocator(20))\n",
    "ax.yaxis.set_major_locator(MaxNLocator(20))\n",
    "\n",
    "# Get the regular numpy array from the MaskedArray\n",
    "X_axis = np.array(metrics_df['threshold'], dtype=float)\n",
    "\n",
    "ax.plot(X_axis, metrics_df['train_f1'], ls='--',\n",
    "        color='g', label='Train F1 Score')\n",
    "ax.plot(X_axis, metrics_df['test_f1'], ls='-',\n",
    "        color='g', label='Test F1 Score')\n",
    "\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 7: What drives churn?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No                     1352\n",
       "No internet service    1175\n",
       "Yes                     801\n",
       "Name: TechSupport, dtype: int64"
      ]
     },
     "execution_count": 426,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "telco['TechSupport'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the coefficients, we see a number of themes:\n",
    "- Usage patterns  (SteamingMovies, TotalDayMinutes etc.)\n",
    "- Quality of service (CustomerServiceCalls etc.)\n",
    "- Demographics (SeniorCitizen etc.)\n",
    "- Payment method (PaymentMethod_Electronic check)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Coef</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>CustomerServiceCalls</th>\n",
       "      <td>4.913326e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>InternationalPlan_Yes</th>\n",
       "      <td>2.589235e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PaymentMethod_Electronic check</th>\n",
       "      <td>2.583465e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PaperlessBilling_Yes</th>\n",
       "      <td>2.536189e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StreamingMovies_Yes</th>\n",
       "      <td>2.254349e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>InternetService_Fiber optic</th>\n",
       "      <td>2.200480e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <td>1.009992e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalCall</th>\n",
       "      <td>7.926636e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalRevenue</th>\n",
       "      <td>2.348502e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalDayMinutes</th>\n",
       "      <td>1.515339e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalIntlMinutes</th>\n",
       "      <td>5.879998e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OnlineBackup_Yes</th>\n",
       "      <td>4.916661e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalHighLatencyMinutes</th>\n",
       "      <td>1.772141e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalHighBandwidthMinutes</th>\n",
       "      <td>8.877168e-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalEveMinutes</th>\n",
       "      <td>-1.652830e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalNightMinutes</th>\n",
       "      <td>-3.198960e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NumbervMailMessages</th>\n",
       "      <td>-1.959778e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tenure</th>\n",
       "      <td>-3.049823e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VoiceMailPlan_Yes</th>\n",
       "      <td>-3.651416e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalDayCalls</th>\n",
       "      <td>-6.185058e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MultipleLines_Yes</th>\n",
       "      <td>-6.664285e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DeviceProtection_Yes</th>\n",
       "      <td>-7.203437e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalNightCalls</th>\n",
       "      <td>-8.546234e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalEveCalls</th>\n",
       "      <td>-1.022984e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender_Male</th>\n",
       "      <td>-1.110803e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StreamingTV_Yes</th>\n",
       "      <td>-1.147422e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TechSupport_No internet service</th>\n",
       "      <td>-1.239300e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StreamingMovies_No internet service</th>\n",
       "      <td>-1.239300e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StreamingTV_No internet service</th>\n",
       "      <td>-1.239300e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DeviceProtection_No internet service</th>\n",
       "      <td>-1.239300e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OnlineBackup_No internet service</th>\n",
       "      <td>-1.239300e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OnlineSecurity_No internet service</th>\n",
       "      <td>-1.239300e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>InternetService_No</th>\n",
       "      <td>-1.239300e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MaritalStatus_Yes</th>\n",
       "      <td>-1.323360e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PaymentMethod_Credit card (automatic)</th>\n",
       "      <td>-1.357745e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TechSupport_Yes</th>\n",
       "      <td>-1.486754e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalIntlCalls</th>\n",
       "      <td>-1.624549e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dependents_Yes</th>\n",
       "      <td>-1.636337e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OnlineSecurity_Yes</th>\n",
       "      <td>-1.983364e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PaymentMethod_Mailed check</th>\n",
       "      <td>-2.419810e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Contract_Two year</th>\n",
       "      <td>-3.311540e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Contract_One year</th>\n",
       "      <td>-3.564751e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               Coef\n",
       "CustomerServiceCalls                   4.913326e-01\n",
       "InternationalPlan_Yes                  2.589235e-01\n",
       "PaymentMethod_Electronic check         2.583465e-01\n",
       "PaperlessBilling_Yes                   2.536189e-01\n",
       "StreamingMovies_Yes                    2.254349e-01\n",
       "InternetService_Fiber optic            2.200480e-01\n",
       "SeniorCitizen                          1.009992e-01\n",
       "TotalCall                              7.926636e-02\n",
       "TotalRevenue                           2.348502e-02\n",
       "TotalDayMinutes                        1.515339e-02\n",
       "TotalIntlMinutes                       5.879998e-03\n",
       "OnlineBackup_Yes                       4.916661e-03\n",
       "TotalHighLatencyMinutes                1.772141e-03\n",
       "TotalHighBandwidthMinutes              8.877168e-07\n",
       "TotalEveMinutes                       -1.652830e-03\n",
       "TotalNightMinutes                     -3.198960e-03\n",
       "NumbervMailMessages                   -1.959778e-02\n",
       "tenure                                -3.049823e-02\n",
       "VoiceMailPlan_Yes                     -3.651416e-02\n",
       "TotalDayCalls                         -6.185058e-02\n",
       "MultipleLines_Yes                     -6.664285e-02\n",
       "DeviceProtection_Yes                  -7.203437e-02\n",
       "TotalNightCalls                       -8.546234e-02\n",
       "TotalEveCalls                         -1.022984e-01\n",
       "gender_Male                           -1.110803e-01\n",
       "StreamingTV_Yes                       -1.147422e-01\n",
       "TechSupport_No internet service       -1.239300e-01\n",
       "StreamingMovies_No internet service   -1.239300e-01\n",
       "StreamingTV_No internet service       -1.239300e-01\n",
       "DeviceProtection_No internet service  -1.239300e-01\n",
       "OnlineBackup_No internet service      -1.239300e-01\n",
       "OnlineSecurity_No internet service    -1.239300e-01\n",
       "InternetService_No                    -1.239300e-01\n",
       "MaritalStatus_Yes                     -1.323360e-01\n",
       "PaymentMethod_Credit card (automatic) -1.357745e-01\n",
       "TechSupport_Yes                       -1.486754e-01\n",
       "TotalIntlCalls                        -1.624549e-01\n",
       "Dependents_Yes                        -1.636337e-01\n",
       "OnlineSecurity_Yes                    -1.983364e-01\n",
       "PaymentMethod_Mailed check            -2.419810e-01\n",
       "Contract_Two year                     -3.311540e-01\n",
       "Contract_One year                     -3.564751e-01"
      ]
     },
     "execution_count": 427,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check Coefficients\n",
    "coef_dict = {}\n",
    "for coef, feat in zip(list(lgrg3.coef_[0]),clean_X_train.columns.tolist()):\n",
    "    coef_dict[feat] = coef\n",
    "    \n",
    "# Convert to dataframe so you can sort it\n",
    "coef_df = pd.DataFrame.from_dict(coef_dict, columns =['Coef'], orient='index')\n",
    "coef_df.sort_values(by=['Coef'], ascending = False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 8: What are your recommendations?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Focus on customer service (ensure adequate resolution of complaints)\n",
    "- Increase tailoring of product offering (e.g., senior citizen TV)\n",
    "- Price (essentially start a price war, potentially start a loyalty programme)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
